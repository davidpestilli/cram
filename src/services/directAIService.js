import axios from 'axios'

const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions'
const API_KEY = import.meta.env.VITE_DEEPSEEK_API_KEY

const deepseekClient = axios.create({
  baseURL: DEEPSEEK_API_URL,
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${API_KEY}`
  },
  timeout: 60000 // 60 segundos para testes
})

// Fun√ß√£o para gerar uma √∫nica quest√£o com resposta espec√≠fica (3F+2V)
const generateSingleQuestion = async (sectionContent, questionNumber) => {
  const questionConfig = getQuestionConfig(questionNumber)
  const prompt = createSingleQuestionPrompt(sectionContent, questionNumber, questionConfig)
  
  const requestData = {
    model: "deepseek-chat",
    messages: [
      {
        role: "system",
        content: `Voc√™ √© um especialista em Direito Penal brasileiro. 
Crie UMA quest√£o educativa verdadeiro/falso com resposta ${questionConfig.expected ? 'VERDADEIRA' : 'FALSA'}.
IMPORTANTE: A resposta correct_answer DEVE SER ${questionConfig.expected ? 'true' : 'false'}.
RESPONDA APENAS COM JSON V√ÅLIDO:
{
  "id": ${questionNumber},
  "question_text": "sua quest√£o aqui",
  "correct_answer": ${questionConfig.expected},
  "explanation": "sua explica√ß√£o aqui",
  "source_text": "trecho da lei",
  "modified_parts": [],
  "difficulty": 3,
  "created_by_ai": "deepseek"
}`
      },
      {
        role: "user",
        content: prompt
      }
    ],
    temperature: 0.4,
    max_tokens: 500,
    stream: false
  }

  const response = await deepseekClient.post('', requestData)
  const aiResponse = response.data.choices[0].message.content.trim()
  
  // Parse direto e simples para uma quest√£o
  let jsonStr = aiResponse
  if (jsonStr.includes('```')) {
    jsonStr = jsonStr.replace(/```json\s*/, '').replace(/```\s*$/, '')
  }
  
  const question = JSON.parse(jsonStr)
  question.id = questionNumber // Garantir ID correto
  
  return question
}

// Fun√ß√£o para gerar quest√µes progressivamente
export const generateQuestionsProgressively = async (sectionContent, count = 5, onProgress = null) => {
  console.log(`üöÄ [PROGRESSIVO] Gerando ${count} quest√µes para: ${sectionContent?.titulo || 'N/A'}`)
  
  if (!API_KEY) {
    throw new Error('‚ùå API Key n√£o configurada. Configure VITE_DEEPSEEK_API_KEY no arquivo .env')
  }

  const questions = []
  const errors = []

  // Gerar quest√µes uma por vez
  for (let i = 1; i <= count; i++) {
    try {
      console.log(`üìù Gerando quest√£o ${i}/${count}...`)
      
      const question = await generateSingleQuestion(sectionContent, i)
      questions.push(question)
      
      console.log(`‚úÖ Quest√£o ${i} gerada com sucesso`)
      
      // Callback de progresso
      if (onProgress) {
        onProgress({
          current: i,
          total: count,
          question: question,
          questions: [...questions]
        })
      }
      
      // Pequeno delay para n√£o sobrecarregar a API
      if (i < count) {
        await new Promise(resolve => setTimeout(resolve, 500))
      }
      
    } catch (error) {
      console.error(`‚ùå Erro ao gerar quest√£o ${i}:`, error.message)
      errors.push({ questionNumber: i, error: error.message })
      
      if (onProgress) {
        onProgress({
          current: i,
          total: count,
          error: error.message,
          questions: [...questions]
        })
      }
    }
  }

  console.log(`üéØ Processo conclu√≠do: ${questions.length}/${count} quest√µes geradas`)
  if (errors.length > 0) {
    console.warn(`‚ö†Ô∏è Erros encontrados:`, errors)
  }

  return {
    questions,
    errors,
    successCount: questions.length,
    totalRequested: count
  }
}

// Manter a fun√ß√£o original como fallback
export const generateQuestionsDirectly = async (sectionContent, count = 5) => {
  console.log(`üöÄ [DIRETO] Gerando ${count} quest√µes para: ${sectionContent?.titulo || 'N/A'}`)
  
  if (!API_KEY) {
    throw new Error('‚ùå API Key n√£o configurada. Configure VITE_DEEPSEEK_API_KEY no arquivo .env')
  }

  // Usar o m√©todo progressivo internamente
  const result = await generateQuestionsProgressively(sectionContent, count)
  
  if (result.questions.length === 0) {
    throw new Error('‚ùå Nenhuma quest√£o p√¥de ser gerada')
  }
  
  return result.questions
}

const createSingleQuestionPrompt = (sectionContent, questionNumber, questionConfig) => {
  const artigo = sectionContent.artigo || 'Artigo n√£o especificado'
  const titulo = sectionContent.titulo || 'Se√ß√£o sem t√≠tulo'
  const conteudo = sectionContent.conteudo || {}
  
  const expectedAnswer = questionConfig.expected ? 'VERDADEIRA' : 'FALSA'
  const answerInstructions = questionConfig.expected 
    ? 'Crie uma afirma√ß√£o CORRETA sobre o conte√∫do legal.'
    : 'Crie uma afirma√ß√£o INCORRETA, introduzindo um erro sutil mas claro (valor errado, modalidade incorreta, etc.).'
  
  return `Crie UMA quest√£o verdadeiro/falso sobre ${artigo} - ${titulo}.
RESPOSTA OBRIGAT√ìRIA: ${expectedAnswer}

CONTE√öDO LEGAL:
${conteudo.tipificacao || 'N√£o especificado'}
Pena: ${conteudo.pena || 'N√£o especificado'}

QUEST√ÉO #${questionNumber} - ${questionConfig.focus}
${answerInstructions}

INSTRU√á√ïES:
- Se a resposta deve ser FALSA, introduza um erro espec√≠fico (ex: pena errada, modalidade incorreta, objeto n√£o protegido)
- Se a resposta deve ser VERDADEIRA, use informa√ß√µes exatas da lei
- Na explica√ß√£o, sempre explique por que a resposta √© ${expectedAnswer}

RESPONDA APENAS JSON V√ÅLIDO:
{
  "id": ${questionNumber},
  "question_text": "sua quest√£o aqui",
  "correct_answer": ${questionConfig.expected},
  "explanation": "explica√ß√£o detalhada do por que √© ${expectedAnswer}",
  "source_text": "trecho da lei",
  "modified_parts": [],
  "difficulty": 3,
  "created_by_ai": "deepseek"
}`
}

// Distribui√ß√£o 3F+2V: quest√µes 1, 3, 5 = false | quest√µes 2, 4 = true
const getQuestionConfig = (questionNumber) => {
  const configs = [
    { 
      id: 1, 
      expected: false, 
      focus: "Foque na PENA - introduza erro na modalidade ou valor (ex: deten√ß√£o em vez de reclus√£o)" 
    },
    { 
      id: 2, 
      expected: true, 
      focus: "Foque na TIPIFICA√á√ÉO - use condutas corretas da lei (falsificar, fabricar, alterar)" 
    }, 
    { 
      id: 3, 
      expected: false, 
      focus: "Foque nos OBJETOS - mencione documento N√ÉO protegido ou descri√ß√£o incorreta" 
    },
    { 
      id: 4, 
      expected: true, 
      focus: "Foque no SUJEITO - defini√ß√£o correta de quem pode cometer o crime" 
    },
    { 
      id: 5, 
      expected: false, 
      focus: "Foque na CONSUMA√á√ÉO - momento errado ou circunst√¢ncia incorreta" 
    }
  ]
  return configs[questionNumber - 1] || configs[0]
}

const getQuestionFocus = (questionNumber) => {
  const config = getQuestionConfig(questionNumber)
  return config.focus
}

const createDirectPrompt = (sectionContent, count) => {
  const artigo = sectionContent.artigo || 'Artigo n√£o especificado'
  const titulo = sectionContent.titulo || 'Se√ß√£o sem t√≠tulo'
  const conteudo = sectionContent.conteudo || {}
  
  return `Crie ${count} quest√µes verdadeiro/falso sobre ${artigo} - ${titulo}.

CONTE√öDO:
Tipifica√ß√£o: ${conteudo.tipificacao || 'N√£o especificado'}
Pena: ${conteudo.pena || 'N√£o especificado'}

FORMATO OBRIGAT√ìRIO (COPIE EXATAMENTE):
{
  "questions": [
    {
      "id": 1,
      "question_text": "Sua quest√£o aqui",
      "correct_answer": true,
      "explanation": "Sua explica√ß√£o aqui",
      "source_text": "Trecho da lei",
      "modified_parts": [],
      "difficulty": 3,
      "created_by_ai": "deepseek"
    }
  ]
}

REGRAS:
1. Responda APENAS JSON v√°lido
2. Use aspas duplas em tudo
3. N√£o quebre linhas em strings
4. V√≠rgula ap√≥s cada propriedade (menos a √∫ltima)
5. Fa√ßa ${count} quest√µes no array

IMPORTANTE: COPIE O FORMATO EXATO ACIMA.`
}

const parseDirectResponse = (aiResponse, sectionContent) => {
  try {
    console.log('üîç Parseando resposta da IA...')
    console.log('üìù Resposta bruta completa:', aiResponse)
    
    // Limpar resposta
    let jsonStr = aiResponse.trim()
    
    // Remover poss√≠vel texto explicativo antes e depois do JSON
    // Procurar por diferentes marcadores de JSON
    const jsonMarkers = [
      { start: '```json', end: '```' },
      { start: '```', end: '```' },
      { start: '{', end: '}' }
    ]
    
    let extractedJson = null
    
    for (const marker of jsonMarkers) {
      if (marker.start === '{') {
        // Para JSON sem marcadores
        const jsonStart = jsonStr.indexOf('{')
        const jsonEnd = jsonStr.lastIndexOf('}')
        
        if (jsonStart !== -1 && jsonEnd !== -1) {
          extractedJson = jsonStr.substring(jsonStart, jsonEnd + 1)
          break
        }
      } else {
        // Para JSON com marcadores
        const startIndex = jsonStr.indexOf(marker.start)
        if (startIndex !== -1) {
          const contentStart = startIndex + marker.start.length
          const endIndex = jsonStr.indexOf(marker.end, contentStart)
          
          if (endIndex !== -1) {
            extractedJson = jsonStr.substring(contentStart, endIndex).trim()
            break
          }
        }
      }
    }
    
    if (!extractedJson) {
      throw new Error('JSON n√£o encontrado na resposta')
    }
    
    console.log('üìù JSON extra√≠do:', extractedJson)
    
    // Tentar corrigir JSON malformado
    extractedJson = fixMalformedJSON(extractedJson)
    
    const parsed = JSON.parse(extractedJson)
    
    if (!parsed.questions || !Array.isArray(parsed.questions)) {
      throw new Error('Formato de resposta inv√°lido: quest√µes n√£o encontradas')
    }
    
    console.log(`‚úÖ ${parsed.questions.length} quest√µes parseadas com sucesso`)
    
    // Processar quest√µes
    const processedQuestions = parsed.questions.map((q, index) => ({
      id: q.id || index + 1,
      question_text: q.question_text || `Quest√£o ${index + 1}`,
      correct_answer: Boolean(q.correct_answer),
      explanation: q.explanation || 'Explica√ß√£o n√£o dispon√≠vel',
      source_text: q.source_text || sectionContent.conteudo?.tipificacao || '',
      modified_parts: q.modified_parts || [],
      difficulty: q.difficulty || 3,
      created_by_ai: 'deepseek_direct'
    }))
    
    console.log('üéØ Quest√µes processadas:', processedQuestions.map(q => ({
      id: q.id,
      correct_answer: q.correct_answer,
      text_preview: q.question_text.substring(0, 50) + '...'
    })))
    
    return processedQuestions
    
  } catch (error) {
    console.error('‚ùå Erro no parse da resposta:', error.message)
    console.error('üìù Resposta original:', aiResponse)
    console.error('üîç Tentativas de extra√ß√£o de JSON falharam')
    
    // Criar um relat√≥rio detalhado do erro
    const errorReport = {
      originalError: error.message,
      responseLength: aiResponse.length,
      responsePreview: aiResponse.substring(0, 500),
      hasJsonMarkers: aiResponse.includes('{') && aiResponse.includes('}'),
      possibleIssues: []
    }
    
    if (aiResponse.includes('```')) {
      errorReport.possibleIssues.push('Resposta cont√©m markdown code blocks')
    }
    if (aiResponse.includes('\n')) {
      errorReport.possibleIssues.push('Resposta cont√©m quebras de linha')
    }
    if (aiResponse.includes("'")) {
      errorReport.possibleIssues.push('Resposta cont√©m aspas simples em vez de duplas')
    }
    
    console.error('üìä Relat√≥rio de erro:', errorReport)
    
    throw new Error(`Erro ao processar resposta da IA: ${error.message}. Verifique o console para detalhes completos.`)
  }
}

// Fun√ß√£o para testar conex√£o
export const testDirectConnection = async () => {
  console.log('üß™ Testando conex√£o direta com DeepSeek...')
  
  if (!API_KEY) {
    return {
      status: 'error',
      message: 'API Key n√£o configurada'
    }
  }
  
  try {
    const response = await deepseekClient.post('', {
      model: "deepseek-chat",
      messages: [
        {
          role: "user",
          content: "Responda apenas 'CONECTADO' se voc√™ pode me ajudar."
        }
      ],
      max_tokens: 10,
      temperature: 0
    })
    
    return {
      status: 'success',
      message: 'Conex√£o estabelecida com sucesso',
      response: response.data.choices[0].message.content
    }
  } catch (error) {
    return {
      status: 'error',
      message: error.message,
      details: error.response?.data
    }
  }
}

// Fun√ß√£o para tentar corrigir JSON severamente malformado
const fixMalformedJSON = (jsonStr) => {
  try {
    console.log('üîß Tentando corrigir JSON severamente malformado...')
    
    // Se o JSON est√° muito quebrado, vamos tentar extrair todas as quest√µes v√°lidas
    console.log('üîß Tentando extrair quest√µes v√°lidas individuais...')
    
    // Padr√£o para encontrar quest√µes v√°lidas
    const questionPattern = /{[^}]*"id":\s*\d+[^}]*"created_by_ai":\s*"deepseek"[^}]*}/g
    const validQuestions = []
    let match
    
    while ((match = questionPattern.exec(jsonStr)) !== null) {
      try {
        const questionStr = match[0]
        console.log(`üîß Tentando parsear quest√£o: ${questionStr.substring(0, 100)}...`)
        
        // Limpar a quest√£o individual
        let cleanQuestion = questionStr
        
        // Remove propriedades com underscore que s√£o coment√°rios
        cleanQuestion = cleanQuestion.replace(/"_[^"]*":\s*"[^"]*",?\s*/g, '')
        cleanQuestion = cleanQuestion.replace(/,\s*}/g, '}')
        
        const parsedQuestion = JSON.parse(cleanQuestion)
        validQuestions.push(parsedQuestion)
        console.log(`‚úÖ Quest√£o ${parsedQuestion.id} extra√≠da com sucesso`)
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao parsear quest√£o individual: ${error.message}`)
      }
    }
    
    if (validQuestions.length > 0) {
      console.log(`üîß Extra√≠das ${validQuestions.length} quest√µes v√°lidas`)
      const reconstructedJson = {
        questions: validQuestions
      }
      
      console.log('üîß JSON reconstru√≠do:', JSON.stringify(reconstructedJson, null, 2))
      return JSON.stringify(reconstructedJson)
    }
    
    // Se n√£o conseguir extrair nem a primeira quest√£o, tenta corre√ß√µes b√°sicas
    let fixed = jsonStr
    
    // Corre√ß√µes mais agressivas
    // 1. Remove espa√ßos extras ao redor de :
    fixed = fixed.replace(/\s*:\s*/g, ':')
    
    // 2. Aspas simples para duplas
    fixed = fixed.replace(/'/g, '"')
    
    // 3. Adiciona aspas em propriedades sem aspas (mais preciso)
    fixed = fixed.replace(/([{,]\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*:/g, '$1"$2":')
    
    // 4. Adiciona aspas em valores string sem aspas
    fixed = fixed.replace(/:([^",{\[\]}\s][^,}\]]*)/g, ':"$1"')
    
    // 5. Corrige valores boolean e n√∫meros
    fixed = fixed.replace(/:"(true|false|null|\d+)"/g, ':$1')
    
    // 6. Remove v√≠rgulas extras
    fixed = fixed.replace(/,(\s*[}\]])/g, '$1')
    
    // 7. Remove caracteres de controle e quebras de linha problem√°ticas
    fixed = fixed.replace(/[\x00-\x1F]/g, ' ')
    fixed = fixed.replace(/\s+/g, ' ')
    
    console.log('üîß JSON ap√≥s corre√ß√µes agressivas:', fixed.substring(0, 500) + '...')
    
    return fixed
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao corrigir JSON:', error)
    return jsonStr
  }
}

export { generateSingleQuestion }

export default {
  generateQuestionsDirectly,
  generateQuestionsProgressively,
  testDirectConnection,
  generateSingleQuestion
}