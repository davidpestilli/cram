import axios from 'axios'
import semanticAnalysisService from './semanticAnalysisService'
import embeddingsService from './embeddingsService'

const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions'
const API_KEY = import.meta.env.VITE_DEEPSEEK_API_KEY

const deepseekClient = axios.create({
  baseURL: DEEPSEEK_API_URL,
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${API_KEY}`
  },
  timeout: 60000 // 60 segundos para testes
})

// Fun√ß√£o para gerar uma √∫nica quest√£o com resposta espec√≠fica (3F+2V)
const generateSingleQuestion = async (sectionContent, questionNumber) => {
  const questionConfig = getQuestionConfig(questionNumber)
  const prompt = createSingleQuestionPrompt(sectionContent, questionNumber, questionConfig)
  
  // Log do prompt para debugging
  console.log(`\nüîç [PROMPT ENVIADO] Quest√£o ${questionNumber} (${questionConfig.type.toUpperCase()})`)
  if (questionConfig.type === 'pratica') {
    console.log(`üé≠ [VERIFICA√á√ÉO] Instru√ß√µes de narrativa inclu√≠das no prompt:`)
    const includesNarrativeInstructions = prompt.includes('NARRATIVA COM PERSONAGENS')
    const includesExampleFormat = prompt.includes('FORMATO OBRIGAT√ìRIO')
    const includesPersonNames = prompt.includes('Nome de pessoa (Jo√£o, Maria')
    console.log(`   üìã Instru√ß√µes de narrativa: ${includesNarrativeInstructions ? '‚úÖ' : '‚ùå'}`)
    console.log(`   üìù Formato obrigat√≥rio: ${includesExampleFormat ? '‚úÖ' : '‚ùå'}`)
    console.log(`   üë§ Nomes de exemplo: ${includesPersonNames ? '‚úÖ' : '‚ùå'}`)
  }
  
  const requestData = {
    model: "deepseek-chat",
    messages: [
      {
        role: "system",
        content: `Voc√™ √© um especialista em Direito Penal brasileiro que cria quest√µes educativas.

TIPOS DE QUEST√ïES:
1. TE√ìRICAS: Falam diretamente sobre a lei ("A pena do Art. 293 √©...", "O crime se consuma quando...")
2. PR√ÅTICAS: Contam hist√≥rias com pessoas reais ("Jo√£o falsificou seu diploma...", "Maria alterou sua certid√£o...")

üéØ QUEST√ÉO ATUAL: ${questionConfig.type?.toUpperCase() || 'N√ÉO ESPECIFICADO'}

${questionConfig.type === 'pratica' ? 
`üî¥ ATEN√á√ÉO - QUEST√ÉO PR√ÅTICA:
CRIE UMA HIST√ìRIA com pessoa, a√ß√£o e documento/objeto.
EXEMPLO: "Carlos alterou sua carteira de habita√ß√£o para mudar a categoria sem fazer o exame. Cometeu falsifica√ß√£o de documento p√∫blico."
N√ÉO fa√ßa quest√£o te√≥rica!` : 
`üîµ QUEST√ÉO TE√ìRICA:
Fale diretamente sobre a lei, penas, conceitos juridicos.
EXEMPLO: "A pena para falsifica√ß√£o de documento p√∫blico √© reclus√£o de 2 a 6 anos."`
}

Resposta OBRIGAT√ìRIA: ${questionConfig.expected ? 'VERDADEIRA' : 'FALSA'}
correct_answer DEVE SER: ${questionConfig.expected ? 'true' : 'false'}

RESPONDA APENAS JSON:
{
  "id": ${questionNumber},
  "question_text": "sua quest√£o aqui",
  "correct_answer": ${questionConfig.expected},
  "explanation": "explica√ß√£o",
  "source_text": "trecho da lei",
  "modified_parts": [],
  "difficulty": 3,
  "created_by_ai": "deepseek"
}`
      },
      {
        role: "user",
        content: prompt
      }
    ],
    temperature: 0.4,
    max_tokens: 500,
    stream: false
  }

  const response = await deepseekClient.post('', requestData)
  const aiResponse = response.data.choices[0].message.content.trim()
  
  // Parse direto e simples para uma quest√£o
  let jsonStr = aiResponse
  if (jsonStr.includes('```')) {
    jsonStr = jsonStr.replace(/```json\s*/, '').replace(/```\s*$/, '')
  }
  
  const question = JSON.parse(jsonStr)
  question.id = questionNumber // Garantir ID correto
  
  // Log detalhado para an√°lise de quest√µes pr√°ticas vs te√≥ricas
  const isTheoreticalQuestion = questionConfig.type === 'teorica'
  
  console.log(`\nüéØ [QUEST√ÉO CRIADA] ID: ${questionNumber}`)
  console.log(`üìù TIPO: ${questionConfig.type.toUpperCase()} (${questionConfig.expected ? 'VERDADEIRA' : 'FALSA'})`)
  console.log(`üí≠ TEXTO: "${question.question_text}"`)
  console.log(`‚úÖ RESPOSTA: ${question.correct_answer}`)
  
  // An√°lise espec√≠fica para quest√µes pr√°ticas
  if (!isTheoreticalQuestion) {
    const hasPersonName = /\b(Jo√£o|Maria|Ana|Carlos|Pedro|Marcos|Jos√©|Ant√¥nio|Francisca|Manoel|Sandra|Roberto|Paula|Ricardo|Fernanda|Eduardo|Luciana|Rafael|Juliana|Diego|Camila|Bruno|Patr√≠cia|Gustavo|Aline|Felipe|Cristina|Andr√©|M√°rcia|Thiago|Renata|Leonardo|Vanessa|Rodrigo|Simone|F√°bio|Tatiana|Vitor|Carla|Daniel|Silvia|Leandro|Rose)\b/i.test(question.question_text)
    const hasAction = /(alterou|criou|falsificou|imitou|destruiu|rasgou|encontrou|colou|fabricou|modificou|apagou|trocou|substituiu|copiou|reproduziu)/i.test(question.question_text)
    const hasDocument = /(certid√£o|diploma|carteira|RG|CPF|documento|papel|selo|vale|bilhete|cautela|tal√£o|recibo|guia|alvar√°)/i.test(question.question_text)
    const hasContext = /(para conseguir|para obter|durante|em um|numa|por causa|devido|com o objetivo|a fim de)/i.test(question.question_text)
    
    console.log(`üé≠ AN√ÅLISE NARRATIVA:`)
    console.log(`   üë§ Tem nome de pessoa: ${hasPersonName ? '‚úÖ' : '‚ùå'}`)
    console.log(`   üé¨ Tem a√ß√£o concreta: ${hasAction ? '‚úÖ' : '‚ùå'}`)
    console.log(`   üìÑ Tem documento espec√≠fico: ${hasDocument ? '‚úÖ' : '‚ùå'}`)
    console.log(`   üåç Tem contexto/motiva√ß√£o: ${hasContext ? '‚úÖ' : '‚ùå'}`)
    
    const narrativeScore = [hasPersonName, hasAction, hasDocument, hasContext].filter(Boolean).length
    console.log(`üèÜ PONTUA√á√ÉO NARRATIVA: ${narrativeScore}/4 ${narrativeScore >= 3 ? '‚úÖ BOA NARRATIVA' : '‚ö†Ô∏è NARRATIVA FRACA'}`)
    
    if (narrativeScore < 3) {
      console.log(`‚ö†Ô∏è [ALERTA] Quest√£o pr√°tica ${questionNumber} n√£o atende aos crit√©rios de narrativa!`)
    }
  } else {
    console.log(`üìö QUEST√ÉO TE√ìRICA - An√°lise conceitual`)
    const hasLegalConcept = /(pena|reclus√£o|deten√ß√£o|art\.|artigo|inciso|par√°grafo|crime|tipifica√ß√£o)/i.test(question.question_text)
    console.log(`   ‚öñÔ∏è Tem conceito legal: ${hasLegalConcept ? '‚úÖ' : '‚ùå'}`)
  }
  
  console.log(`üîß EXPLICA√á√ÉO: "${question.explanation}"`)
  console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`)
  
  return question
}

// Contador global para manter distribui√ß√£o 3F+2V e 3P+2T ao longo de m√∫ltiplas subse√ß√µes
let globalQuestionCounter = 0

// Fun√ß√£o para gerar quest√µes progressivamente com an√°lise sem√¢ntica
export const generateQuestionsProgressively = async (options) => {
  // Suporte tanto para chamada com objeto quanto par√¢metros individuais
  let sectionContent, count, onProgress, subjectId, sectionId, customPrompt, startFromGlobalCounter
  
  if (typeof options === 'object' && options.sectionContent) {
    // Nova assinatura (objeto)
    ({ sectionContent, targetCount: count = 5, onProgress = null, subjectId = 1, sectionId = 1, customPrompt, startFromGlobalCounter = true } = options)
  } else {
    // Assinatura antiga (par√¢metros individuais) para compatibilidade
    sectionContent = arguments[0]
    count = arguments[1] || 5
    onProgress = arguments[2] || null
    subjectId = arguments[3] || 1
    sectionId = arguments[4] || 1
    startFromGlobalCounter = false
  }
  
  console.log(`üöÄ [PROGRESSIVO INTELIGENTE] Gerando ${count} quest√µes para: ${sectionContent?.titulo || 'N/A'}`)
  
  if (!API_KEY) {
    throw new Error('‚ùå API Key n√£o configurada. Configure VITE_DEEPSEEK_API_KEY no arquivo .env')
  }

  // An√°lise sem√¢ntica pr√©via
  console.log('üß† Realizando an√°lise sem√¢ntica do espa√ßo existente...')
  const semanticAnalysis = await semanticAnalysisService.analyzeExistingQuestions(subjectId, sectionId)
  
  console.log(`üìä An√°lise conclu√≠da:`, {
    questionsExistentes: semanticAnalysis.totalQuestions,
    clusters: semanticAnalysis.clusters.length,
    areasSuper: semanticAnalysis.overexploredAreas.length,
    sugestoes: semanticAnalysis.suggestions.length
  })

  const questions = []
  const errors = []
  const generatedEmbeddings = [] // Para verifica√ß√£o em tempo real

  // Gerar quest√µes uma por vez com orienta√ß√£o inteligente
  for (let i = 1; i <= count; i++) {
    try {
      // Usar contador global ou local dependendo da configura√ß√£o
      const questionNumber = startFromGlobalCounter ? (++globalQuestionCounter) : i
      console.log(`üìù Gerando quest√£o ${i}/${count} com orienta√ß√£o sem√¢ntica... (Posi√ß√£o global: ${questionNumber})`)
      
      const question = await generateSingleQuestionIntelligent(
        sectionContent, 
        questionNumber, 
        semanticAnalysis, 
        generatedEmbeddings,
        customPrompt
      )
      
      // Verifica√ß√£o em tempo real
      if (embeddingsService.isEnabled()) {
        let quickEmbedding = await embeddingsService.generateEmbedding(question.question_text)
        if (quickEmbedding) {
          const similarity = await checkRealTimeSimilarity(quickEmbedding, generatedEmbeddings, semanticAnalysis)
          
          if (similarity > 0.9) {
            console.log(`‚ö†Ô∏è Quest√£o ${i} muito similar (${similarity.toFixed(3)}), regenerando...`)
            try {
              // Tentar regenerar com mais diversifica√ß√£o (apenas 1 tentativa)
              const diversifiedQuestion = await regenerateWithDiversification(
                sectionContent, 
                i, 
                semanticAnalysis,
                question
              )
              // Substituir a quest√£o inteira
              Object.assign(question, diversifiedQuestion)
              quickEmbedding = await embeddingsService.generateEmbedding(question.question_text)
              console.log(`‚úÖ Quest√£o ${i} regenerada com sucesso`)
            } catch (error) {
              console.log(`‚ö†Ô∏è Falha ao regenerar quest√£o ${i}, usando original:`, error.message)
              // Usar quest√£o original se regenera√ß√£o falhar
            }
          }
          
          generatedEmbeddings.push(quickEmbedding)
        }
      }
      
      questions.push(question)
      
      console.log(`‚úÖ Quest√£o ${i} gerada com sucesso`)
      
      // Callback de progresso
      if (onProgress) {
        onProgress({
          current: i,
          total: count,
          question: question,
          questions: [...questions],
          semanticAnalysis: i === 1 ? semanticAnalysis : undefined
        })
      }
      
      // Pequeno delay para n√£o sobrecarregar a API
      if (i < count) {
        await new Promise(resolve => setTimeout(resolve, 500))
      }
      
    } catch (error) {
      console.error(`‚ùå Erro ao gerar quest√£o ${i}:`, error.message)
      errors.push({ questionNumber: i, error: error.message })
      
      if (onProgress) {
        onProgress({
          current: i,
          total: count,
          error: error.message,
          questions: [...questions]
        })
      }
    }
  }

  console.log(`üéØ Processo conclu√≠do: ${questions.length}/${count} quest√µes geradas`)
  
  // Log da distribui√ß√£o de quest√µes V/F
  if (startFromGlobalCounter && questions.length > 0) {
    const trueCount = questions.filter(q => q.correct_answer === true).length
    const falseCount = questions.filter(q => q.correct_answer === false).length
    console.log(`üìä Distribui√ß√£o V/F desta batch: ${trueCount}V + ${falseCount}F | Contador global atual: ${globalQuestionCounter}`)
  }
  
  // Log da distribui√ß√£o de tipos (pr√°tica vs te√≥rica)
  if (questions.length > 0) {
    let teoricasCount = 0
    let praticasCount = 0
    let narrativasComBomScore = 0
    
    questions.forEach((q, index) => {
      const questionNumber = startFromGlobalCounter ? (globalQuestionCounter - questions.length + index + 1) : (index + 1)
      const questionConfig = getQuestionConfig(questionNumber)
      
      if (questionConfig.type === 'teorica') {
        teoricasCount++
      } else {
        praticasCount++
        
        // Verificar se a quest√£o pr√°tica tem boa narrativa
        const hasPersonName = /\b(Jo√£o|Maria|Ana|Carlos|Pedro|Marcos|Jos√©|Ant√¥nio|Francisca|Manoel|Sandra|Roberto|Paula|Ricardo|Fernanda|Eduardo|Luciana|Rafael|Juliana|Diego|Camila|Bruno|Patr√≠cia|Gustavo|Aline|Felipe|Cristina|Andr√©|M√°rcia|Thiago|Renata|Leonardo|Vanessa|Rodrigo|Simone|F√°bio|Tatiana|Vitor|Carla|Daniel|Silvia|Leandro|Rose)\b/i.test(q.question_text)
        const hasAction = /(alterou|criou|falsificou|imitou|destruiu|rasgou|encontrou|colou|fabricou|modificou|apagou|trocou|substituiu|copiou|reproduziu)/i.test(q.question_text)
        const hasDocument = /(certid√£o|diploma|carteira|RG|CPF|documento|papel|selo|vale|bilhete|cautela|tal√£o|recibo|guia|alvar√°)/i.test(q.question_text)
        const hasContext = /(para conseguir|para obter|durante|em um|numa|por causa|devido|com o objetivo|a fim de)/i.test(q.question_text)
        
        const narrativeScore = [hasPersonName, hasAction, hasDocument, hasContext].filter(Boolean).length
        if (narrativeScore >= 3) {
          narrativasComBomScore++
        }
      }
    })
    
    console.log(`\nüìã [RESUMO DA GERA√á√ÉO]`)
    console.log(`üìö Quest√µes te√≥ricas: ${teoricasCount}/${questions.length}`)
    console.log(`üé≠ Quest√µes pr√°ticas: ${praticasCount}/${questions.length}`)
    console.log(`‚úÖ Narrativas bem estruturadas: ${narrativasComBomScore}/${praticasCount} pr√°ticas`)
    console.log(`üìà Taxa de sucesso narrativo: ${praticasCount > 0 ? ((narrativasComBomScore/praticasCount)*100).toFixed(1) : 0}%`)
    console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ`)
  }
  
  if (errors.length > 0) {
    console.warn(`‚ö†Ô∏è Erros encontrados:`, errors)
  }

  return {
    questions,
    errors,
    successCount: questions.length,
    totalRequested: count
  }
}

// Fun√ß√£o para resetar o contador global de quest√µes
export const resetGlobalQuestionCounter = () => {
  console.log(`üîÑ Resetando contador global de quest√µes (estava em ${globalQuestionCounter})`)
  globalQuestionCounter = 0
}

// Fun√ß√£o para obter o contador atual (para debugging)
export const getGlobalQuestionCounter = () => globalQuestionCounter

// Manter a fun√ß√£o original como fallback
export const generateQuestionsDirectly = async (sectionContent, count = 5) => {
  console.log(`üöÄ [DIRETO] Gerando ${count} quest√µes para: ${sectionContent?.titulo || 'N/A'}`)
  
  if (!API_KEY) {
    throw new Error('‚ùå API Key n√£o configurada. Configure VITE_DEEPSEEK_API_KEY no arquivo .env')
  }

  // Usar o m√©todo progressivo internamente
  const result = await generateQuestionsProgressively(sectionContent, count)
  
  if (result.questions.length === 0) {
    throw new Error('‚ùå Nenhuma quest√£o p√¥de ser gerada')
  }
  
  return result.questions
}

const createSingleQuestionPrompt = (sectionContent, questionNumber, questionConfig) => {
  const artigo = sectionContent.artigo || 'Artigo n√£o especificado'
  const titulo = sectionContent.titulo || 'Se√ß√£o sem t√≠tulo'
  const conteudo = sectionContent.conteudo || {}
  
  const expectedAnswer = questionConfig.expected ? 'VERDADEIRA' : 'FALSA'
  const isTheoreticalQuestion = questionConfig.type === 'teorica'
  
  const answerInstructions = questionConfig.expected 
    ? (isTheoreticalQuestion 
        ? 'Crie uma afirma√ß√£o CORRETA sobre o conte√∫do legal direto (defini√ß√µes, penas, elementos).'
        : 'Crie um CASO PR√ÅTICO CORRETO onde a situa√ß√£o se enquadra perfeitamente no crime.')
    : (isTheoreticalQuestion
        ? 'Crie uma afirma√ß√£o INCORRETA sobre o conte√∫do legal, introduzindo erro sutil mas claro.'
        : 'Crie um CASO PR√ÅTICO INCORRETO onde a situa√ß√£o N√ÉO caracteriza o crime ou se confunde com outro.')
  
  // Formatar conte√∫do completo
  const fullLegalContent = formatCompleteLegalContent(conteudo)
  
  return `Crie UMA quest√£o verdadeiro/falso sobre ${artigo} - ${titulo}.
RESPOSTA OBRIGAT√ìRIA: ${expectedAnswer}

CONTE√öDO LEGAL COMPLETO:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${fullLegalContent}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

QUEST√ÉO #${questionNumber} - TIPO: ${questionConfig.type.toUpperCase()}
${questionConfig.focus}
${answerInstructions}

${isTheoreticalQuestion 
  ? `INSTRU√á√ïES PARA QUEST√ïES TE√ìRICAS:
- Foque no TEXTO DA LEI: defini√ß√µes, penas, elementos, tipifica√ß√£o
- EXPLORE OS INCISOS: Use diferentes incisos (I, II, III, IV, V, VI) para quest√µes espec√≠ficas
- SEJA PRECISO: Cite valores exatos de penas, modalidades corretas (reclus√£o/deten√ß√£o)
- Se FALSA: Introduza erros espec√≠ficos (pena errada, modalidade incorreta, inciso trocado)
- Se VERDADEIRA: Use informa√ß√µes exatas dos artigos e incisos`
  : `INSTRU√á√ïES PARA QUEST√ïES PR√ÅTICAS - OBRIGAT√ìRIO SEGUIR:

üé≠ CRIE UMA NARRATIVA COM PERSONAGENS:
Uma quest√£o pr√°tica √© uma HIST√ìRIA REAL com personagens onde a legisla√ß√£o est√° sendo analisada.
Deve ser uma NARRA√á√ÉO com pessoas reais em situa√ß√µes concretas da vida.

üé® FORMATO OBRIGAT√ìRIO: "[Nome da pessoa] [a√ß√£o concreta] [objeto/documento] [finalidade/contexto]. [Conclus√£o jur√≠dica]."

‚úÖ EXEMPLOS DE NARRATIVAS PR√ÅTICAS CORRETAS:
- "Maria alterou os dados de sua certid√£o de nascimento para parecer mais jovem em um concurso p√∫blico. Cometeu o crime do Art. X."
- "Jo√£o criou um diploma universit√°rio falso da USP para conseguir um emprego melhor. Praticou falsifica√ß√£o de documento p√∫blico."
- "Ana rasgou a carteira de motorista do ex-marido durante uma discuss√£o. Cometeu o crime de falsifica√ß√£o."
- "Pedro imitou a assinatura do pai em um cheque para sacar dinheiro. Caracteriza falsifica√ß√£o de documento."
- "Carlos encontrou um selo tribut√°rio no ch√£o e o colou em um documento vencido. Sua conduta configura crime."

üö´ PROIBIDO em quest√µes pr√°ticas:
- Citar artigos diretamente ("O Art. 293 prev√™...")
- Explicar conceitos ("A falsifica√ß√£o consiste em...")
- Usar termos t√©cnicos sem contexto pr√°tico
- Quest√µes abstratas ou gen√©ricas
- Frases sem personagens ou situa√ß√£o concreta

üéØ ELEMENTOS OBRIGAT√ìRIOS PARA A NARRATIVA:
- Nome de pessoa (Jo√£o, Maria, Carlos, Ana, etc.)
- A√ß√£o concreta (alterou, criou, falsificou, imitou, destruiu, encontrou, colou)
- Documento/objeto espec√≠fico (RG, diploma, certid√£o, carteira, selo, vale postal)
- Motiva√ß√£o/contexto (para conseguir emprego, enganar autoridade, obter vantagem, por raiva)
- Situa√ß√£o da vida real (concurso, trabalho, discuss√£o, necessidade financeira)
- Conclus√£o jur√≠dica simples sobre se configura ou n√£o o crime

üìö LEMBRE-SE: Um exemplo pr√°tico envolve uma NARRA√á√ÉO com personagens em casos reais onde a legisla√ß√£o est√° sendo analisada. N√£o precisa ser longa, basta ser um caso real e situacional.`
}

RESPONDA APENAS JSON V√ÅLIDO:
{
  "id": ${questionNumber},
  "question_text": "sua quest√£o aqui",
  "correct_answer": ${questionConfig.expected},
  "explanation": "explica√ß√£o detalhada do por que √© ${expectedAnswer}",
  "source_text": "trecho da lei",
  "modified_parts": [],
  "difficulty": 3,
  "created_by_ai": "deepseek"
}`
}

// Distribui√ß√£o 3F+2V: quest√µes 1, 3, 5 = false | quest√µes 2, 4 = true
// Distribui√ß√£o por tipo: quest√µes 1, 2 = te√≥ricas | quest√µes 3, 4, 5 = pr√°ticas
const getQuestionConfig = (questionNumber) => {
  // Normalizar para ciclo de 5 quest√µes (1-5, 6-10, 11-15, etc.)
  const normalizedNumber = ((questionNumber - 1) % 5) + 1
  
  const configs = [
    { 
      id: 1, 
      expected: false,
      type: "teorica",
      focus: "QUEST√ÉO TE√ìRICA: Foque na PENA - introduza erro na modalidade ou valor (ex: deten√ß√£o em vez de reclus√£o, valores incorretos)" 
    },
    { 
      id: 2, 
      expected: true,
      type: "teorica",
      focus: "QUEST√ÉO TE√ìRICA: Foque na TIPIFICA√á√ÉO - use defini√ß√µes e condutas corretas da lei (falsificar, fabricar, alterar)" 
    }, 
    { 
      id: 3, 
      expected: false,
      type: "pratica",
      focus: "QUEST√ÉO PR√ÅTICA FALSA: Crie uma hist√≥ria com pessoas reais onde a situa√ß√£o N√ÉO √© crime (ex: Jo√£o rasgou seu pr√≥prio certificado, Maria perdeu carteira de identidade)" 
    },
    { 
      id: 4, 
      expected: true,
      type: "pratica", 
      focus: "QUEST√ÉO PR√ÅTICA VERDADEIRA: Crie uma hist√≥ria com pessoas reais onde claramente OCORREU o crime (ex: Carlos falsificou diploma para conseguir emprego)" 
    },
    { 
      id: 5, 
      expected: false,
      type: "pratica",
      focus: "QUEST√ÉO PR√ÅTICA FALSA: Crie uma hist√≥ria que PARECE ser crime mas N√ÉO √© (ex: Ana imitou assinatura da irm√£ com autoriza√ß√£o, documento privado vs p√∫blico)" 
    }
  ]
  return configs[normalizedNumber - 1] || configs[0]
}

const getQuestionFocus = (questionNumber) => {
  const config = getQuestionConfig(questionNumber)
  return config.focus
}

const createDirectPrompt = (sectionContent, count) => {
  const artigo = sectionContent.artigo || 'Artigo n√£o especificado'
  const titulo = sectionContent.titulo || 'Se√ß√£o sem t√≠tulo'
  const conteudo = sectionContent.conteudo || {}
  
  return `Crie ${count} quest√µes verdadeiro/falso sobre ${artigo} - ${titulo}.

CONTE√öDO:
Tipifica√ß√£o: ${conteudo.tipificacao || 'N√£o especificado'}
Pena: ${conteudo.pena || 'N√£o especificado'}

FORMATO OBRIGAT√ìRIO (COPIE EXATAMENTE):
{
  "questions": [
    {
      "id": 1,
      "question_text": "Sua quest√£o aqui",
      "correct_answer": true,
      "explanation": "Sua explica√ß√£o aqui",
      "source_text": "Trecho da lei",
      "modified_parts": [],
      "difficulty": 3,
      "created_by_ai": "deepseek"
    }
  ]
}

REGRAS:
1. Responda APENAS JSON v√°lido
2. Use aspas duplas em tudo
3. N√£o quebre linhas em strings
4. V√≠rgula ap√≥s cada propriedade (menos a √∫ltima)
5. Fa√ßa ${count} quest√µes no array

IMPORTANTE: COPIE O FORMATO EXATO ACIMA.`
}

const parseDirectResponse = (aiResponse, sectionContent) => {
  try {
    console.log('üîç Parseando resposta da IA...')
    console.log('üìù Resposta bruta completa:', aiResponse)
    
    // Limpar resposta
    let jsonStr = aiResponse.trim()
    
    // Remover poss√≠vel texto explicativo antes e depois do JSON
    // Procurar por diferentes marcadores de JSON
    const jsonMarkers = [
      { start: '```json', end: '```' },
      { start: '```', end: '```' },
      { start: '{', end: '}' }
    ]
    
    let extractedJson = null
    
    for (const marker of jsonMarkers) {
      if (marker.start === '{') {
        // Para JSON sem marcadores
        const jsonStart = jsonStr.indexOf('{')
        const jsonEnd = jsonStr.lastIndexOf('}')
        
        if (jsonStart !== -1 && jsonEnd !== -1) {
          extractedJson = jsonStr.substring(jsonStart, jsonEnd + 1)
          break
        }
      } else {
        // Para JSON com marcadores
        const startIndex = jsonStr.indexOf(marker.start)
        if (startIndex !== -1) {
          const contentStart = startIndex + marker.start.length
          const endIndex = jsonStr.indexOf(marker.end, contentStart)
          
          if (endIndex !== -1) {
            extractedJson = jsonStr.substring(contentStart, endIndex).trim()
            break
          }
        }
      }
    }
    
    if (!extractedJson) {
      throw new Error('JSON n√£o encontrado na resposta')
    }
    
    console.log('üìù JSON extra√≠do:', extractedJson)
    
    // Tentar corrigir JSON malformado
    extractedJson = fixMalformedJSON(extractedJson)
    
    const parsed = JSON.parse(extractedJson)
    
    if (!parsed.questions || !Array.isArray(parsed.questions)) {
      throw new Error('Formato de resposta inv√°lido: quest√µes n√£o encontradas')
    }
    
    console.log(`‚úÖ ${parsed.questions.length} quest√µes parseadas com sucesso`)
    
    // Processar quest√µes
    const processedQuestions = parsed.questions.map((q, index) => ({
      id: q.id || index + 1,
      question_text: q.question_text || `Quest√£o ${index + 1}`,
      correct_answer: Boolean(q.correct_answer),
      explanation: q.explanation || 'Explica√ß√£o n√£o dispon√≠vel',
      source_text: q.source_text || sectionContent.conteudo?.tipificacao || '',
      modified_parts: q.modified_parts || [],
      difficulty: q.difficulty || 3,
      created_by_ai: 'deepseek_direct'
    }))
    
    console.log('üéØ Quest√µes processadas:', processedQuestions.map(q => ({
      id: q.id,
      correct_answer: q.correct_answer,
      text_preview: q.question_text.substring(0, 50) + '...'
    })))
    
    return processedQuestions
    
  } catch (error) {
    console.error('‚ùå Erro no parse da resposta:', error.message)
    console.error('üìù Resposta original:', aiResponse)
    console.error('üîç Tentativas de extra√ß√£o de JSON falharam')
    
    // Criar um relat√≥rio detalhado do erro
    const errorReport = {
      originalError: error.message,
      responseLength: aiResponse.length,
      responsePreview: aiResponse.substring(0, 500),
      hasJsonMarkers: aiResponse.includes('{') && aiResponse.includes('}'),
      possibleIssues: []
    }
    
    if (aiResponse.includes('```')) {
      errorReport.possibleIssues.push('Resposta cont√©m markdown code blocks')
    }
    if (aiResponse.includes('\n')) {
      errorReport.possibleIssues.push('Resposta cont√©m quebras de linha')
    }
    if (aiResponse.includes("'")) {
      errorReport.possibleIssues.push('Resposta cont√©m aspas simples em vez de duplas')
    }
    
    console.error('üìä Relat√≥rio de erro:', errorReport)
    
    throw new Error(`Erro ao processar resposta da IA: ${error.message}. Verifique o console para detalhes completos.`)
  }
}

// Fun√ß√£o para testar conex√£o
export const testDirectConnection = async () => {
  console.log('üß™ Testando conex√£o direta com DeepSeek...')
  
  if (!API_KEY) {
    return {
      status: 'error',
      message: 'API Key n√£o configurada'
    }
  }
  
  try {
    const response = await deepseekClient.post('', {
      model: "deepseek-chat",
      messages: [
        {
          role: "user",
          content: "Responda apenas 'CONECTADO' se voc√™ pode me ajudar."
        }
      ],
      max_tokens: 10,
      temperature: 0
    })
    
    return {
      status: 'success',
      message: 'Conex√£o estabelecida com sucesso',
      response: response.data.choices[0].message.content
    }
  } catch (error) {
    return {
      status: 'error',
      message: error.message,
      details: error.response?.data
    }
  }
}

// Fun√ß√£o para tentar corrigir JSON severamente malformado
const fixMalformedJSON = (jsonStr) => {
  try {
    console.log('üîß Tentando corrigir JSON severamente malformado...')
    
    // Se o JSON est√° muito quebrado, vamos tentar extrair todas as quest√µes v√°lidas
    console.log('üîß Tentando extrair quest√µes v√°lidas individuais...')
    
    // Padr√£o para encontrar quest√µes v√°lidas
    const questionPattern = /{[^}]*"id":\s*\d+[^}]*"created_by_ai":\s*"deepseek"[^}]*}/g
    const validQuestions = []
    let match
    
    while ((match = questionPattern.exec(jsonStr)) !== null) {
      try {
        const questionStr = match[0]
        console.log(`üîß Tentando parsear quest√£o: ${questionStr.substring(0, 100)}...`)
        
        // Limpar a quest√£o individual
        let cleanQuestion = questionStr
        
        // Remove propriedades com underscore que s√£o coment√°rios
        cleanQuestion = cleanQuestion.replace(/"_[^"]*":\s*"[^"]*",?\s*/g, '')
        cleanQuestion = cleanQuestion.replace(/,\s*}/g, '}')
        
        const parsedQuestion = JSON.parse(cleanQuestion)
        validQuestions.push(parsedQuestion)
        console.log(`‚úÖ Quest√£o ${parsedQuestion.id} extra√≠da com sucesso`)
      } catch (error) {
        console.warn(`‚ö†Ô∏è Erro ao parsear quest√£o individual: ${error.message}`)
      }
    }
    
    if (validQuestions.length > 0) {
      console.log(`üîß Extra√≠das ${validQuestions.length} quest√µes v√°lidas`)
      const reconstructedJson = {
        questions: validQuestions
      }
      
      console.log('üîß JSON reconstru√≠do:', JSON.stringify(reconstructedJson, null, 2))
      return JSON.stringify(reconstructedJson)
    }
    
    // Se n√£o conseguir extrair nem a primeira quest√£o, tenta corre√ß√µes b√°sicas
    let fixed = jsonStr
    
    // Corre√ß√µes mais agressivas
    // 1. Remove espa√ßos extras ao redor de :
    fixed = fixed.replace(/\s*:\s*/g, ':')
    
    // 2. Aspas simples para duplas
    fixed = fixed.replace(/'/g, '"')
    
    // 3. Adiciona aspas em propriedades sem aspas (mais preciso)
    fixed = fixed.replace(/([{,]\s*)([a-zA-Z_][a-zA-Z0-9_]*)\s*:/g, '$1"$2":')
    
    // 4. Adiciona aspas em valores string sem aspas
    fixed = fixed.replace(/:([^",{\[\]}\s][^,}\]]*)/g, ':"$1"')
    
    // 5. Corrige valores boolean e n√∫meros
    fixed = fixed.replace(/:"(true|false|null|\d+)"/g, ':$1')
    
    // 6. Remove v√≠rgulas extras
    fixed = fixed.replace(/,(\s*[}\]])/g, '$1')
    
    // 7. Remove caracteres de controle e quebras de linha problem√°ticas
    fixed = fixed.replace(/[\x00-\x1F]/g, ' ')
    fixed = fixed.replace(/\s+/g, ' ')
    
    console.log('üîß JSON ap√≥s corre√ß√µes agressivas:', fixed.substring(0, 500) + '...')
    
    return fixed
  } catch (error) {
    console.warn('‚ö†Ô∏è Erro ao corrigir JSON:', error)
    return jsonStr
  }
}

// Fun√ß√µes auxiliares para gera√ß√£o inteligente

async function generateSingleQuestionIntelligent(sectionContent, questionNumber, semanticAnalysis, generatedEmbeddings, customPrompt = null) {
  let guidedPrompt
  
  if (customPrompt) {
    // Usar prompt personalizado quando fornecido
    guidedPrompt = customPrompt
  } else {
    // Criar prompt com orienta√ß√£o sem√¢ntica padr√£o
    guidedPrompt = await semanticAnalysisService.generateGuidedPrompt(
      '',
      sectionContent,
      semanticAnalysis
    )
  }

  // Usar a fun√ß√£o original com prompt guiado
  const questionConfig = getQuestionConfig(questionNumber)
  const prompt = createIntelligentQuestionPrompt(sectionContent, questionNumber, questionConfig, guidedPrompt)
  
  // Log do prompt para debugging
  console.log(`\nüîç [PROMPT ENVIADO] Quest√£o ${questionNumber} (${questionConfig.type.toUpperCase()})`)
  if (questionConfig.type === 'pratica') {
    console.log(`üé≠ [VERIFICA√á√ÉO] Instru√ß√µes de narrativa inclu√≠das no prompt:`)
    const includesNarrativeInstructions = prompt.includes('NARRATIVA COM PERSONAGENS')
    const includesExampleFormat = prompt.includes('FORMATO OBRIGAT√ìRIO')
    const includesPersonNames = prompt.includes('Nome de pessoa (Jo√£o, Maria')
    console.log(`   üìã Instru√ß√µes de narrativa: ${includesNarrativeInstructions ? '‚úÖ' : '‚ùå'}`)
    console.log(`   üìù Formato obrigat√≥rio: ${includesExampleFormat ? '‚úÖ' : '‚ùå'}`)
    console.log(`   üë§ Nomes de exemplo: ${includesPersonNames ? '‚úÖ' : '‚ùå'}`)
    
    if (!includesNarrativeInstructions) {
      console.log(`‚ö†Ô∏è [PROBLEMA] Instru√ß√µes de narrativa N√ÉO foram inclu√≠das no prompt!`)
    }
  }
  
  return await generateSingleQuestionWithPrompt(sectionContent, questionNumber, prompt)
}

function createIntelligentQuestionPrompt(sectionContent, questionNumber, questionConfig, guidancePrompt) {
  const artigo = sectionContent.artigo || 'Artigo n√£o especificado'
  const titulo = sectionContent.titulo || 'Se√ß√£o sem t√≠tulo'
  const conteudo = sectionContent.conteudo || {}
  
  const expectedAnswer = questionConfig.expected ? 'VERDADEIRA' : 'FALSA'
  const isTheoreticalQuestion = questionConfig.type === 'teorica'
  
  const answerInstructions = questionConfig.expected 
    ? (isTheoreticalQuestion 
        ? 'Crie uma afirma√ß√£o CORRETA sobre o conte√∫do legal direto (defini√ß√µes, penas, elementos).'
        : 'Crie um CASO PR√ÅTICO CORRETO onde a situa√ß√£o se enquadra perfeitamente no crime.')
    : (isTheoreticalQuestion
        ? 'Crie uma afirma√ß√£o INCORRETA sobre o conte√∫do legal, introduzindo erro sutil mas claro.'
        : 'Crie um CASO PR√ÅTICO INCORRETO onde a situa√ß√£o N√ÉO caracteriza o crime ou se confunde com outro.')

  // Usar conte√∫do completo formatado
  const fullLegalContent = formatCompleteLegalContent(conteudo)

  return `${guidancePrompt}

CONTEXTO LEGAL COMPLETO:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
${artigo} - ${titulo}

${fullLegalContent}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

QUEST√ÉO #${questionNumber} - TIPO: ${questionConfig.type.toUpperCase()}
RESPOSTA OBRIGAT√ìRIA: ${expectedAnswer}
${answerInstructions}

${isTheoreticalQuestion 
  ? `INSTRU√á√ïES PARA QUEST√ïES TE√ìRICAS:
- Foque no TEXTO DA LEI: defini√ß√µes, penas, elementos, tipifica√ß√£o
- EXPLORE OS INCISOS: Use diferentes incisos (I, II, III, IV, V, VI) para quest√µes espec√≠ficas
- SEJA PRECISO: Cite valores exatos de penas, modalidades corretas (reclus√£o/deten√ß√£o)
- Se FALSA: Introduza erros espec√≠ficos (pena errada, modalidade incorreta, inciso trocado)
- Se VERDADEIRA: Use informa√ß√µes exatas dos artigos e incisos`
  : `INSTRU√á√ïES PARA QUEST√ïES PR√ÅTICAS - OBRIGAT√ìRIO SEGUIR:

üé≠ CRIE UMA NARRATIVA COM PERSONAGENS:
Uma quest√£o pr√°tica √© uma HIST√ìRIA REAL com personagens onde a legisla√ß√£o est√° sendo analisada.
Deve ser uma NARRA√á√ÉO com pessoas reais em situa√ß√µes concretas da vida.

üé® FORMATO OBRIGAT√ìRIO: "[Nome da pessoa] [a√ß√£o concreta] [objeto/documento] [finalidade/contexto]. [Conclus√£o jur√≠dica]."

‚úÖ EXEMPLOS DE NARRATIVAS PR√ÅTICAS CORRETAS:
- "Maria alterou os dados de sua certid√£o de nascimento para parecer mais jovem em um concurso p√∫blico. Cometeu o crime do Art. X."
- "Jo√£o criou um diploma universit√°rio falso da USP para conseguir um emprego melhor. Praticou falsifica√ß√£o de documento p√∫blico."
- "Ana rasgou a carteira de motorista do ex-marido durante uma discuss√£o. Cometeu o crime de falsifica√ß√£o."
- "Pedro imitou a assinatura do pai em um cheque para sacar dinheiro. Caracteriza falsifica√ß√£o de documento."
- "Carlos encontrou um selo tribut√°rio no ch√£o e o colou em um documento vencido. Sua conduta configura crime."

üö´ PROIBIDO em quest√µes pr√°ticas:
- Citar artigos diretamente ("O Art. 293 prev√™...")
- Explicar conceitos ("A falsifica√ß√£o consiste em...")
- Usar termos t√©cnicos sem contexto pr√°tico
- Quest√µes abstratas ou gen√©ricas
- Frases sem personagens ou situa√ß√£o concreta

üéØ ELEMENTOS OBRIGAT√ìRIOS PARA A NARRATIVA:
- Nome de pessoa (Jo√£o, Maria, Carlos, Ana, etc.)
- A√ß√£o concreta (alterou, criou, falsificou, imitou, destruiu, encontrou, colou)
- Documento/objeto espec√≠fico (RG, diploma, certid√£o, carteira, selo, vale postal)
- Motiva√ß√£o/contexto (para conseguir emprego, enganar autoridade, obter vantagem, por raiva)
- Situa√ß√£o da vida real (concurso, trabalho, discuss√£o, necessidade financeira)
- Conclus√£o jur√≠dica simples sobre se configura ou n√£o o crime

üìö LEMBRE-SE: Um exemplo pr√°tico envolve uma NARRA√á√ÉO com personagens em casos reais onde a legisla√ß√£o est√° sendo analisada. N√£o precisa ser longa, basta ser um caso real e situacional.`
}

RESPONDA APENAS JSON V√ÅLIDO:
{
  "id": ${questionNumber},
  "question_text": "sua quest√£o aqui",
  "correct_answer": ${questionConfig.expected},
  "explanation": "explica√ß√£o detalhada do por que √© ${expectedAnswer}",
  "source_text": "trecho da lei",
  "modified_parts": [],
  "difficulty": 3,
  "created_by_ai": "deepseek"
}`
}

async function regenerateWithDiversification(sectionContent, questionNumber, semanticAnalysis, originalQuestion) {
  const diversificationPrompt = `
IMPORTANTE: A quest√£o anterior era muito similar a quest√µes existentes:
"${originalQuestion.question_text}"

CRIE uma quest√£o COMPLETAMENTE DIFERENTE sobre o mesmo t√≥pico jur√≠dico.
${semanticAnalysis.suggestions.map(s => `‚Ä¢ ${s}`).join('\n')}

Seja CRIATIVO e aborde aspectos √öNICOS do tema.
`
  
  const questionConfig = getQuestionConfig(questionNumber)
  const prompt = createIntelligentQuestionPrompt(sectionContent, questionNumber, questionConfig, diversificationPrompt)
  
  return await generateSingleQuestionWithPrompt(sectionContent, questionNumber, prompt)
}

async function checkRealTimeSimilarity(questionEmbedding, generatedEmbeddings, semanticAnalysis) {
  let maxSimilarity = 0

  // Comparar com quest√µes j√° geradas nesta sess√£o
  for (const embedding of generatedEmbeddings) {
    const similarity = embeddingsService.calculateSimilarity(questionEmbedding, embedding)
    maxSimilarity = Math.max(maxSimilarity, similarity)
  }

  // Comparar com clusters existentes (amostragem)
  for (const cluster of semanticAnalysis.clusters.slice(0, 3)) {
    if (cluster.centroid?.embedding) {
      const similarity = embeddingsService.calculateSimilarity(
        questionEmbedding, 
        cluster.centroid.embedding
      )
      maxSimilarity = Math.max(maxSimilarity, similarity)
    }
  }

  return maxSimilarity
}

async function generateSingleQuestionWithPrompt(sectionContent, questionNumber, customPrompt) {
  try {
    const response = await deepseekClient.post('', {
      model: 'deepseek-chat',
      messages: [
        {
          role: 'system',
          content: 'Voc√™ √© um especialista em Direito Penal brasileiro. Crie quest√µes precisas e educativas.'
        },
        {
          role: 'user',
          content: customPrompt
        }
      ],
      max_tokens: 800,
      temperature: 0.8, // Maior criatividade
      response_format: { type: 'json_object' }
    })

    if (!response.data?.choices?.[0]?.message?.content) {
      throw new Error('Resposta vazia da API')
    }

    const content = response.data.choices[0].message.content
    const parsed = JSON.parse(content)
    
    const question = {
      id: questionNumber,
      question_text: parsed.question_text,
      correct_answer: Boolean(parsed.correct_answer),
      explanation: parsed.explanation,
      difficulty: parsed.difficulty || 3,
      source_text: parsed.source_text || sectionContent.artigo,
      modified_parts: parsed.modified_parts || []
    }
    
    // Log detalhado para an√°lise de quest√µes pr√°ticas vs te√≥ricas
    const questionConfig = getQuestionConfig(questionNumber)
    const isTheoreticalQuestion = questionConfig.type === 'teorica'
    
    console.log(`\nüéØ [QUEST√ÉO CRIADA] ID: ${questionNumber}`)
    console.log(`üìù TIPO: ${questionConfig.type.toUpperCase()} (${questionConfig.expected ? 'VERDADEIRA' : 'FALSA'})`)
    console.log(`üí≠ TEXTO: "${question.question_text}"`)
    console.log(`‚úÖ RESPOSTA: ${question.correct_answer}`)
    
    // An√°lise espec√≠fica para quest√µes pr√°ticas
    if (!isTheoreticalQuestion) {
      const hasPersonName = /\b(Jo√£o|Maria|Ana|Carlos|Pedro|Marcos|Jos√©|Ant√¥nio|Francisca|Manoel|Sandra|Roberto|Paula|Ricardo|Fernanda|Eduardo|Luciana|Rafael|Juliana|Diego|Camila|Bruno|Patr√≠cia|Gustavo|Aline|Felipe|Cristina|Andr√©|M√°rcia|Thiago|Renata|Leonardo|Vanessa|Rodrigo|Simone|F√°bio|Tatiana|Vitor|Carla|Daniel|Silvia|Leandro|Rose)\b/i.test(question.question_text)
      const hasAction = /(alterou|criou|falsificou|imitou|destruiu|rasgou|encontrou|colou|fabricou|modificou|apagou|trocou|substituiu|copiou|reproduziu)/i.test(question.question_text)
      const hasDocument = /(certid√£o|diploma|carteira|RG|CPF|documento|papel|selo|vale|bilhete|cautela|tal√£o|recibo|guia|alvar√°)/i.test(question.question_text)
      const hasContext = /(para conseguir|para obter|durante|em um|numa|por causa|devido|com o objetivo|a fim de)/i.test(question.question_text)
      
      console.log(`üé≠ AN√ÅLISE NARRATIVA:`)
      console.log(`   üë§ Tem nome de pessoa: ${hasPersonName ? '‚úÖ' : '‚ùå'}`)
      console.log(`   üé¨ Tem a√ß√£o concreta: ${hasAction ? '‚úÖ' : '‚ùå'}`)
      console.log(`   üìÑ Tem documento espec√≠fico: ${hasDocument ? '‚úÖ' : '‚ùå'}`)
      console.log(`   üåç Tem contexto/motiva√ß√£o: ${hasContext ? '‚úÖ' : '‚ùå'}`)
      
      const narrativeScore = [hasPersonName, hasAction, hasDocument, hasContext].filter(Boolean).length
      console.log(`üèÜ PONTUA√á√ÉO NARRATIVA: ${narrativeScore}/4 ${narrativeScore >= 3 ? '‚úÖ BOA NARRATIVA' : '‚ö†Ô∏è NARRATIVA FRACA'}`)
      
      if (narrativeScore < 3) {
        console.log(`‚ö†Ô∏è [ALERTA] Quest√£o pr√°tica ${questionNumber} n√£o atende aos crit√©rios de narrativa!`)
      }
    } else {
      console.log(`üìö QUEST√ÉO TE√ìRICA - An√°lise conceitual`)
      const hasLegalConcept = /(pena|reclus√£o|deten√ß√£o|art\.|artigo|inciso|par√°grafo|crime|tipifica√ß√£o)/i.test(question.question_text)
      console.log(`   ‚öñÔ∏è Tem conceito legal: ${hasLegalConcept ? '‚úÖ' : '‚ùå'}`)
    }
    
    console.log(`üîß EXPLICA√á√ÉO: "${question.explanation}"`)
    console.log(`‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`)
    
    return question

  } catch (error) {
    console.error(`‚ùå Erro ao gerar quest√£o inteligente ${questionNumber}:`, error)
    // Fallback para m√©todo original
    return await generateSingleQuestion(sectionContent, questionNumber)
  }
}

// Fun√ß√£o auxiliar para formatar conte√∫do legal completo
function formatCompleteLegalContent(conteudo) {
  if (!conteudo) return 'Conte√∫do n√£o dispon√≠vel'
  
  let formattedContent = ''
  
  // Tipifica√ß√£o
  if (conteudo.tipificacao) {
    formattedContent += `üìã TIPIFICA√á√ÉO:\n${conteudo.tipificacao}\n\n`
  }
  
  // Objetos/Incisos (mais comum)
  if (conteudo.objetos && Array.isArray(conteudo.objetos)) {
    formattedContent += `üìú OBJETOS PROTEGIDOS (INCISOS):\n`
    conteudo.objetos.forEach(objeto => {
      formattedContent += `${objeto}\n`
    })
    formattedContent += '\n'
  }
  
  // Elementos do crime
  if (conteudo.elementos && Array.isArray(conteudo.elementos)) {
    formattedContent += `‚öñÔ∏è ELEMENTOS DO CRIME:\n`
    conteudo.elementos.forEach(elemento => {
      formattedContent += `‚Ä¢ ${elemento}\n`
    })
    formattedContent += '\n'
  }
  
  // Objetos protegidos (diferente de objetos/incisos)
  if (conteudo.objetos_protegidos && Array.isArray(conteudo.objetos_protegidos)) {
    formattedContent += `üõ°Ô∏è BENS JUR√çDICOS PROTEGIDOS:\n`
    conteudo.objetos_protegidos.forEach(objeto => {
      formattedContent += `‚Ä¢ ${objeto}\n`
    })
    formattedContent += '\n'
  }
  
  // Sujeitos
  if (conteudo.sujeito_ativo) {
    formattedContent += `üë§ SUJEITO ATIVO: ${conteudo.sujeito_ativo}\n`
  }
  if (conteudo.sujeito_passivo) {
    formattedContent += `üë• SUJEITO PASSIVO: ${conteudo.sujeito_passivo}\n`
  }
  if (conteudo.sujeito_ativo || conteudo.sujeito_passivo) {
    formattedContent += '\n'
  }
  
  // Modalidades e aspectos objetivos/subjetivos
  if (conteudo.aspecto_objetivo) {
    formattedContent += `üéØ ASPECTO OBJETIVO: ${conteudo.aspecto_objetivo}\n`
  }
  if (conteudo.aspecto_subjetivo) {
    formattedContent += `üß† ASPECTO SUBJETIVO: ${conteudo.aspecto_subjetivo}\n`
  }
  if (conteudo.aspecto_objetivo || conteudo.aspecto_subjetivo) {
    formattedContent += '\n'
  }
  
  // Modalidades (tentativa, consuma√ß√£o, etc.)
  if (conteudo.tentativa) {
    formattedContent += `‚è∞ TENTATIVA: ${conteudo.tentativa}\n`
  }
  if (conteudo.consumacao) {
    formattedContent += `‚úÖ CONSUMA√á√ÉO: ${conteudo.consumacao}\n`
  }
  if (conteudo.tentativa || conteudo.consumacao) {
    formattedContent += '\n'
  }
  
  // Pena (sempre importante)
  if (conteudo.pena) {
    formattedContent += `‚öñÔ∏è PENA: ${conteudo.pena}\n\n`
  }
  
  // Observa√ß√µes e notas
  if (conteudo.observacoes) {
    formattedContent += `üìù OBSERVA√á√ïES IMPORTANTES:\n${conteudo.observacoes}\n\n`
  }
  
  if (conteudo.notas) {
    formattedContent += `üí° NOTAS ADICIONAIS:\n${conteudo.notas}\n\n`
  }
  
  // Classifica√ß√µes doutrin√°rias
  if (conteudo.classificacao) {
    formattedContent += `üìö CLASSIFICA√á√ÉO DOUTRIN√ÅRIA:\n`
    if (Array.isArray(conteudo.classificacao)) {
      conteudo.classificacao.forEach(item => {
        formattedContent += `‚Ä¢ ${item}\n`
      })
    } else {
      formattedContent += `${conteudo.classificacao}\n`
    }
    formattedContent += '\n'
  }
  
  return formattedContent.trim() || 'Informa√ß√µes n√£o dispon√≠veis'
}

export { generateSingleQuestion }

export default {
  generateQuestionsDirectly,
  generateQuestionsProgressively,
  testDirectConnection,
  generateSingleQuestion
}