import { supabase } from '../lib/supabase'
import { generateQuestions } from './deepseekApi'
import { generateQuestionsProgressively, resetGlobalQuestionCounter } from './directAIService'
import questionDeduplicationService from './questionDeduplicationService'
import direitoPenalEstruturado from '../data/direito_penal_estruturado.json'
import matematicaEstruturada from '../data/matematica_subsections.json'
import SubsectionDistributionService from './subsectionDistributionService'

console.log('üîÑ QuestionsService carregado com import est√°tico:', !!direitoPenalEstruturado)

// Controle de execu√ß√£o simult√¢nea
const generationLocks = new Map()

export class QuestionsService {
  static async getOrCreateQuestions(subjectId, sectionId, options = {}) {
    try {
      const { userId, questionType = 'auto', forceNew = false } = options
      
      // Controle anti-concorr√™ncia
      const lockKey = `${subjectId}-${sectionId}-${questionType}`
      if (generationLocks.has(lockKey)) {
        console.log(`üîí Gera√ß√£o j√° em andamento para ${lockKey}, aguardando...`)
        return await generationLocks.get(lockKey)
      }
      
      if (questionType === 'answered' && userId) {
        return await this.getAnsweredQuestions(userId, subjectId, sectionId)
      }
      
      if (questionType === 'unanswered' && userId) {
        return await this.getUnansweredQuestions(userId, subjectId, sectionId)
      }
      
      // Criar promise para controle de concorr√™ncia
      const generationPromise = this.executeGeneration(subjectId, sectionId, options)
      generationLocks.set(lockKey, generationPromise)
      
      try {
        const result = await generationPromise
        return result
      } finally {
        generationLocks.delete(lockKey)
      }

    } catch (error) {
      console.error('Error in getOrCreateQuestions:', error)
      throw error
    }
  }

  static async executeGeneration(subjectId, sectionId, options = {}) {
    const { userId, questionType = 'auto', forceNew = false, onProgress } = options

    if (questionType === 'new' || forceNew) {
      return await this.generateBalancedQuestions(subjectId, sectionId, 10, onProgress)
    }
    
    // Comportamento autom√°tico (padr√£o)
    if (!forceNew) {
      const existingQuestions = await this.getExistingQuestions(subjectId, sectionId)
      if (existingQuestions.length > 0) {
        console.log(`Found ${existingQuestions.length} existing questions for section ${sectionId}`)
        return {
          questions: existingQuestions,
          source: 'database',
          created: false
        }
      }
    }

    // Fallback: gera√ß√£o equilibrada
    return await this.generateBalancedQuestions(subjectId, sectionId, 10)
  }

  static async getExistingQuestions(subjectId, sectionId) {
    const { data, error } = await supabase
      .from('questions')
      .select('*')
      .eq('subject_id', subjectId)
      .eq('section_id', sectionId)
      .order('created_at', { ascending: true })

    if (error) {
      console.error('Error fetching existing questions:', error)
      return []
    }

    return data || []
  }

  static async getSectionContent(sectionId) {
    try {
      // Buscar informa√ß√µes da se√ß√£o no banco
      const { data: section, error: sectionError } = await supabase
        .from('sections')
        .select('*')
        .eq('id', sectionId)
        .single()

      if (sectionError) {
        throw sectionError
      }

      // Usar o conte√∫do estruturado direto do import
      const fileContent = this.loadSectionContentFromFile(sectionId)
      
      return {
        ...section,
        ...fileContent  // Merge directly so titulo, artigo etc. are at root level
      }

    } catch (error) {
      console.error('Error getting section content:', error)
      return null
    }
  }

  static loadSectionContentFromFile(sectionId) {
    try {
      console.log(`üìÇ [NOVO] Carregando se√ß√£o ${sectionId} via import direto...`)
      
      // Determinar qual fonte de dados usar baseado no sectionId
      let dataSource, sectionsArray
      
      if (sectionId >= 14 && sectionId <= 26) {
        // IDs 14-26: Matem√°tica
        dataSource = matematicaEstruturada
        sectionsArray = matematicaEstruturada?.sections
        console.log(`üìö Carregando da fonte: Matem√°tica`)
      } else {
        // IDs 1-13: Direito Penal  
        dataSource = direitoPenalEstruturado
        sectionsArray = direitoPenalEstruturado?.secoes
        console.log(`‚öñÔ∏è Carregando da fonte: Direito Penal`)
      }
      
      if (!dataSource || !sectionsArray) {
        console.error('‚ùå Import falhou - dados n√£o dispon√≠veis')
        return this.getMockSectionContent(sectionId)
      }
      
      console.log(`‚úÖ Import OK! ${sectionsArray.length} se√ß√µes carregadas`)
      
      // Encontrar a se√ß√£o espec√≠fica
      let searchId = parseInt(sectionId)
      
      // Para Matem√°tica, ajustar o ID: banco (14-26) ‚Üí JSON (1-13)
      if (sectionId >= 14 && sectionId <= 26) {
        searchId = sectionId - 13
        console.log(`üîÑ Mapeando ID do banco ${sectionId} ‚Üí JSON ${searchId}`)
      }
      
      const section = sectionsArray.find(s => s.id === searchId)
      
      if (section) {
        console.log(`‚úÖ Se√ß√£o ${sectionId} encontrada: "${section.titulo}"`)
        
        // Para Direito Penal, mostrar artigo; para Matem√°tica, mostrar fonte
        if (section.artigo) {
          console.log(`üìù Artigo: ${section.artigo}`)
        } else if (dataSource.fonte) {
          console.log(`üìö Fonte: ${dataSource.fonte}`)
        }
        
        return section
      } else {
        console.warn(`‚ö†Ô∏è Se√ß√£o ${sectionId} n√£o encontrada`)
        const availableSections = sectionsArray.map(s => `${s.id}: ${s.titulo}`).join(', ')
        console.log(`üìã Se√ß√µes dispon√≠veis: ${availableSections}`)
        return this.getMockSectionContent(sectionId)
      }
    } catch (error) {
      console.error('‚ùå Erro ao carregar se√ß√£o:', error)
      return this.getMockSectionContent(sectionId)
    }
  }

  static getMockSectionContent(sectionId) {
    // Mock data baseado no arquivo direito_penal_estruturado.json
    const mockSections = {
      1: {
        id: 1,
        titulo: "Falsifica√ß√£o de Pap√©is P√∫blicos - Conceitos B√°sicos",
        artigo: "Art. 293",
        conteudo: {
          tipificacao: "Falsificar, fabricando-os ou alterando-os",
          objetos: [
            "selo destinado a controle tribut√°rio, papel selado ou qualquer papel de emiss√£o legal destinado √† arrecada√ß√£o de tributo",
            "papel de cr√©dito p√∫blico que n√£o seja moeda de curso legal",
            "vale postal",
            "cautela de penhor, caderneta de dep√≥sito de caixa econ√¥mica",
            "tal√£o, recibo, guia, alvar√° ou qualquer outro documento relativo a arrecada√ß√£o de rendas p√∫blicas",
            "bilhete, passe ou conhecimento de empresa de transporte administrada pela Uni√£o, por Estado ou por Munic√≠pio"
          ],
          pena: "reclus√£o, de dois a oito anos, e multa",
          pontos_chave: [
            "Crime de falsifica√ß√£o documental espec√≠fico para pap√©is p√∫blicos",
            "Duas modalidades: fabrica√ß√£o (criar do nada) e altera√ß√£o (modificar existente)",
            "Objetos protegidos s√£o espec√≠ficos e taxativos",
            "Pena mais grave que falsifica√ß√£o de documento particular"
          ]
        }
      }
    }

    return mockSections[sectionId] || {
      id: parseInt(sectionId),
      titulo: `Se√ß√£o ${sectionId}`,
      artigo: "Art. 293",
      conteudo: {
        tipificacao: "Conte√∫do da se√ß√£o n√£o dispon√≠vel",
        pena: "conforme legisla√ß√£o espec√≠fica",
        pontos_chave: ["Conte√∫do em desenvolvimento"]
      }
    }
  }

  static async saveQuestions(questions, subjectId, sectionId, sectionContent = {}) {
    try {
      console.log(`üíæ Salvando ${questions.length} quest√µes com sistema anti-repeti√ß√£o...`)
      
      // Processar quest√µes com sistema anti-repeti√ß√£o
      const deduplicationResult = await questionDeduplicationService.processQuestionsWithAntiRepetition(
        questions,
        subjectId,
        sectionId,
        sectionContent
      )

      const processedQuestions = deduplicationResult.questions
      
      // Preparar dados para inser√ß√£o com campos de embedding
      const questionsToInsert = processedQuestions.map(q => ({
        subject_id: subjectId,
        section_id: sectionId,
        question_text: q.question_text,
        correct_answer: q.correct_answer,
        explanation: q.explanation,
        difficulty: q.difficulty || 3,
        source_text: q.source_text,
        modified_parts: q.modified_parts || [],
        created_by_ai: q.created_by_ai || 'deepseek',
        // Novos campos de embeddings
        embedding: q.embedding || null,
        semantic_hash: q.semantic_hash || null,
        content_categories: q.content_categories || [],
        // Campo de subse√ß√£o para distribui√ß√£o equilibrada
        subsection_id: q.subsection_id || null
      }))

      // Inserir no banco
      const { data, error } = await supabase
        .from('questions')
        .insert(questionsToInsert)
        .select()

      if (error) {
        throw error
      }

      console.log(`‚úÖ Salvas ${data.length} quest√µes no banco com embeddings`)
      console.log(`üìä Estat√≠sticas anti-repeti√ß√£o:`, deduplicationResult.stats)
      
      return {
        questions: data,
        deduplicationStats: deduplicationResult.stats
      }

    } catch (error) {
      console.error('‚ùå Erro ao salvar quest√µes:', error)
      throw error
    }
  }

  static async generateNewQuestions(subjectId, sectionId, options = {}) {
    const lockKey = `${subjectId}-${sectionId}`
    
    // Verificar se j√° existe uma gera√ß√£o em andamento
    if (generationLocks.has(lockKey)) {
      console.log(`‚è∏Ô∏è Gera√ß√£o j√° em andamento para se√ß√£o ${sectionId}, aguardando conclus√£o...`)
      return await generationLocks.get(lockKey)
    }

    // Criar promise e adicionar ao lock
    const generationPromise = this._executeGeneration(subjectId, sectionId, options)
    generationLocks.set(lockKey, generationPromise)
    
    try {
      const result = await generationPromise
      return result
    } finally {
      // Sempre remover o lock ao finalizar
      generationLocks.delete(lockKey)
    }
  }

  static async _executeGeneration(subjectId, sectionId, options = {}) {
    try {
      const { count = 5, onProgress = null } = options
      
      // Buscar conte√∫do da se√ß√£o
      const sectionContent = await this.getSectionContent(sectionId)
      if (!sectionContent) {
        throw new Error('Section content not found')
      }

      console.log(`üöÄ Gerando ${count} novas quest√µes para se√ß√£o ${sectionId} com sistema 3F+2V...`)
      
      // Gerar quest√µes com sistema progressivo inteligente (3F+2V + an√°lise sem√¢ntica)
      const generationResult = await generateQuestionsProgressively(sectionContent, count, onProgress, subjectId, sectionId)
      
      if (generationResult.questions.length === 0) {
        throw new Error('Nenhuma quest√£o p√¥de ser gerada')
      }

      console.log(`üìù Geradas ${generationResult.questions.length}/${count} quest√µes`)
      
      // Salvar quest√µes no banco com sistema anti-repeti√ß√£o
      const saveResult = await this.saveQuestions(
        generationResult.questions, 
        subjectId, 
        sectionId, 
        sectionContent
      )

      return {
        questions: saveResult.questions || saveResult, // Compatibilidade com formato antigo
        source: 'generated_progressive',
        created: true,
        generationStats: {
          requested: count,
          generated: generationResult.questions.length,
          errors: generationResult.errors,
          successRate: (generationResult.questions.length / count * 100).toFixed(1) + '%'
        },
        deduplicationStats: saveResult.deduplicationStats,
        distribution: this.analyzeDistribution(saveResult.questions || saveResult)
      }
    } catch (error) {
      console.error('‚ùå Erro ao gerar novas quest√µes:', error)
      throw error
    }
  }

  // M√©todo auxiliar para analisar distribui√ß√£o 3F+2V
  static analyzeDistribution(questions) {
    if (!Array.isArray(questions)) return { error: 'Invalid questions array' }
    
    const trueCount = questions.filter(q => q.correct_answer === true).length
    const falseCount = questions.filter(q => q.correct_answer === false).length
    
    return {
      total: questions.length,
      true_answers: trueCount,
      false_answers: falseCount,
      expected_distribution: '3F+2V',
      matches_expected: falseCount === 3 && trueCount === 2
    }
  }

  // Outros m√©todos mantidos iguais...
  static async saveUserAnswer(userId, questionId, userAnswer, timeSpent = 0) {
    try {
      const { data: question, error: questionError } = await supabase
        .from('questions')
        .select('correct_answer')
        .eq('id', questionId)
        .single()

      if (questionError) {
        throw questionError
      }

      const isCorrect = userAnswer === question.correct_answer
      const { data: existingAnswer } = await supabase
        .from('user_answers')
        .select('id, attempt_number')
        .eq('user_id', userId)
        .eq('question_id', questionId)
        .order('attempt_number', { ascending: false })
        .limit(1)

      const attemptNumber = existingAnswer && existingAnswer.length > 0 
        ? existingAnswer[0].attempt_number + 1 
        : 1

      const { data, error } = await supabase
        .from('user_answers')
        .insert({
          user_id: userId,
          question_id: questionId,
          user_answer: userAnswer,
          is_correct: isCorrect,
          time_spent: timeSpent,
          attempt_number: attemptNumber
        })
        .select()
        .single()

      if (error) {
        throw error
      }

      return {
        ...data,
        is_correct: isCorrect
      }

    } catch (error) {
      console.error('Error saving user answer:', error)
      throw error
    }
  }

  static async updateUserStats(userId, subjectId, sectionId, isCorrect) {
    try {
      const { data: currentStats } = await supabase
        .from('user_section_stats')
        .select('*')
        .eq('user_id', userId)
        .eq('subject_id', subjectId)
        .eq('section_id', sectionId)
        .single()

      const newStats = {
        questions_answered: (currentStats?.questions_answered || 0) + 1,
        questions_correct: (currentStats?.questions_correct || 0) + (isCorrect ? 1 : 0),
        last_studied: new Date().toISOString()
      }

      newStats.mastery_level = newStats.questions_correct / newStats.questions_answered

      if (currentStats) {
        const { error } = await supabase
          .from('user_section_stats')
          .update(newStats)
          .eq('id', currentStats.id)

        if (error) throw error
      } else {
        const { error } = await supabase
          .from('user_section_stats')
          .insert({
            user_id: userId,
            subject_id: subjectId,
            section_id: sectionId,
            ...newStats
          })

        if (error) throw error
      }

      return newStats

    } catch (error) {
      console.error('Error updating user stats:', error)
      throw error
    }
  }

  static async getUserProgress(userId, subjectId, sectionId) {
    try {
      const { data, error } = await supabase
        .from('user_section_stats')
        .select('*')
        .eq('user_id', userId)
        .eq('subject_id', subjectId)
        .eq('section_id', sectionId)
        .single()

      if (error && error.code !== 'PGRST116') {
        throw error
      }

      return data || {
        questions_answered: 0,
        questions_correct: 0,
        mastery_level: 0,
        last_studied: null
      }

    } catch (error) {
      console.error('Error getting user progress:', error)
      return {
        questions_answered: 0,
        questions_correct: 0,
        mastery_level: 0,
        last_studied: null
      }
    }
  }

  static async getAnsweredQuestions(userId, subjectId, sectionId, limit = 10) {
    try {
      // Primeiro buscar as respostas do usu√°rio ordenadas
      const { data: userAnswers, error: answersError } = await supabase
        .from('user_answers')
        .select('question_id, user_answer, is_correct, answered_at')
        .eq('user_id', userId)
        .order('answered_at', { ascending: false })
        .limit(limit)

      if (answersError) throw answersError

      if (!userAnswers || userAnswers.length === 0) {
        return {
          questions: [],
          source: 'answered',
          created: false
        }
      }

      const questionIds = userAnswers.map(ua => ua.question_id)

      // Buscar as quest√µes correspondentes
      const { data: questions, error: questionsError } = await supabase
        .from('questions')
        .select('*')
        .eq('subject_id', subjectId)
        .eq('section_id', sectionId)
        .in('id', questionIds)

      if (questionsError) throw questionsError

      // Combinar quest√µes com respostas do usu√°rio na ordem correta
      const answeredQuestions = userAnswers.map(userAnswer => {
        const question = questions.find(q => q.id === userAnswer.question_id)
        return {
          ...question,
          user_answers: [userAnswer]
        }
      }).filter(q => q.id) // Remove quest√µes n√£o encontradas

      console.log(`Found ${answeredQuestions.length} answered questions for user`)
      return {
        questions: answeredQuestions,
        source: 'answered',
        created: false
      }
    } catch (error) {
      console.error('Error getting answered questions:', error)
      return {
        questions: [],
        source: 'answered',
        created: false
      }
    }
  }

  static async getUnansweredQuestions(userId, subjectId, sectionId, limit = 10) {
    try {
      const { data: allQuestions, error: questionsError } = await supabase
        .from('questions')
        .select('*')
        .eq('subject_id', subjectId)
        .eq('section_id', sectionId)

      if (questionsError) throw questionsError

      if (!allQuestions || allQuestions.length === 0) {
        return {
          questions: [],
          source: 'unanswered',
          created: false
        }
      }

      const { data: answeredQuestions, error: answersError } = await supabase
        .from('user_answers')
        .select('question_id')
        .eq('user_id', userId)
        .in('question_id', allQuestions.map(q => q.id))

      const answeredIds = new Set(
        answersError ? [] : (answeredQuestions?.map(a => a.question_id) || [])
      )

      const unansweredQuestions = allQuestions
        .filter(q => !answeredIds.has(q.id))
        .slice(0, limit)

      console.log(`Found ${unansweredQuestions.length} unanswered questions for user`)
      return {
        questions: unansweredQuestions,
        source: 'unanswered',
        created: false
      }
    } catch (error) {
      console.error('Error getting unanswered questions:', error)
      return {
        questions: [],
        source: 'unanswered', 
        created: false
      }
    }
  }

  static async getQuestionStats(userId, subjectId, sectionId) {
    try {
      console.log('Getting question stats for:', { userId, subjectId, sectionId })
      
      const { data: allQuestions, error: questionsError } = await supabase
        .from('questions')
        .select('id')
        .eq('subject_id', subjectId)
        .eq('section_id', sectionId)

      if (questionsError) {
        console.error('Error fetching questions:', questionsError)
        throw questionsError
      }

      const total = allQuestions?.length || 0
      const questionIds = allQuestions?.map(q => q.id) || []
      
      let answered = 0
      if (total > 0 && questionIds.length > 0) {
        const { data: userAnswers, error: answersError } = await supabase
          .from('user_answers')
          .select('question_id')
          .eq('user_id', userId)
          .in('question_id', questionIds)

        if (answersError) {
          console.error('Error fetching user answers:', answersError)
        } else {
          const uniqueAnsweredQuestions = new Set(userAnswers?.map(a => a.question_id) || [])
          answered = uniqueAnsweredQuestions.size
        }
      }

      const unanswered = total - answered
      
      const stats = {
        total,
        answered,
        unanswered,
        canGenerateNew: true
      }

      console.log('Question stats calculated:', stats)
      return stats

    } catch (error) {
      console.error('Error getting question stats:', error)
      return {
        total: 0,
        answered: 0,
        unanswered: 0,
        canGenerateNew: true
      }
    }
  }

  // =====================================================
  // M√âTODOS PARA DISTRIBUI√á√ÉO EQUILIBRADA POR SUBSE√á√ïES
  // =====================================================

  /**
   * Gerar quest√µes usando distribui√ß√£o equilibrada por subse√ß√µes
   * @param {number} subjectId - ID da mat√©ria
   * @param {number} sectionId - ID da se√ß√£o
   * @param {number} totalQuestions - Total de quest√µes a gerar
   * @returns {Promise<Object>} Resultado da gera√ß√£o equilibrada
   */
  static async generateBalancedQuestions(subjectId, sectionId, totalQuestions = 10, onProgress = null) {
    try {
      console.log(`üéØ Iniciando gera√ß√£o equilibrada: ${totalQuestions} quest√µes para se√ß√£o ${sectionId}`)

      // Controle anti-concorr√™ncia espec√≠fico para gera√ß√£o equilibrada
      const balancedLockKey = `balanced-${subjectId}-${sectionId}-${totalQuestions}`
      if (generationLocks.has(balancedLockKey)) {
        console.log(`üîí Gera√ß√£o equilibrada j√° em andamento para se√ß√£o ${sectionId}, aguardando...`)
        return await generationLocks.get(balancedLockKey)
      }

      const balancedPromise = this.executeBalancedGeneration(subjectId, sectionId, totalQuestions, onProgress)
      generationLocks.set(balancedLockKey, balancedPromise)
      
      try {
        const result = await balancedPromise
        return result
      } finally {
        generationLocks.delete(balancedLockKey)
      }

    } catch (error) {
      console.error('‚ùå Erro na gera√ß√£o equilibrada:', error)
      throw error
    }
  }

  static async executeBalancedGeneration(subjectId, sectionId, totalQuestions = 10, onProgress = null) {
    // Resetar contador global para manter distribui√ß√£o 3F+2V e 3P+2T correta
    resetGlobalQuestionCounter()
    
    // Obter plano de distribui√ß√£o com gera√ß√£o cont√≠nua permitida
    const generationPlan = await SubsectionDistributionService.planQuestionGeneration(
      sectionId, 
      totalQuestions, 
      true // allowContinuous = true
    )
    
    if (generationPlan.length === 0) {
      console.log('‚úÖ Nenhuma subse√ß√£o encontrada para gera√ß√£o')
      return {
        questions: [],
        source: 'balanced_generation',
        created: false,
        message: 'Nenhuma subse√ß√£o dispon√≠vel para gera√ß√£o'
      }
    }

    console.log(`üìã Plano de gera√ß√£o:`, generationPlan.map(p => 
      `${p.titulo}: ${p.questionsToGenerate} quest√µes`
    ).join(', '))

    // Gerar quest√µes para cada subse√ß√£o no plano
    const allGeneratedQuestions = []
    const generationResults = []

    for (let i = 0; i < generationPlan.length; i++) {
      const subsectionPlan = generationPlan[i]
      console.log(`üéØ Gerando ${subsectionPlan.questionsToGenerate} quest√µes para: ${subsectionPlan.titulo}`)
      
      try {
        const subsectionQuestions = await this.generateQuestionsForSubsection(
          subjectId, 
          sectionId, 
          subsectionPlan, 
          subsectionPlan.questionsToGenerate
        )

        if (subsectionQuestions && subsectionQuestions.length > 0) {
          allGeneratedQuestions.push(...subsectionQuestions)
          
          // Callback de progresso
          if (onProgress) {
            onProgress(allGeneratedQuestions.length, totalQuestions)
          }
          
          generationResults.push({
            subsectionId: subsectionPlan.subsectionId,
            titulo: subsectionPlan.titulo,
            requested: subsectionPlan.questionsToGenerate,
            generated: subsectionQuestions.length
          })
        }
      } catch (subsectionError) {
        console.error(`‚ùå Erro gerando quest√µes para ${subsectionPlan.titulo}:`, subsectionError)
        generationResults.push({
          subsectionId: subsectionPlan.subsectionId,
          titulo: subsectionPlan.titulo,
          requested: subsectionPlan.questionsToGenerate,
          generated: 0,
          error: subsectionError.message
        })
      }
    }

    console.log(`‚úÖ Gera√ß√£o equilibrada conclu√≠da: ${allGeneratedQuestions.length} quest√µes geradas`)
    console.log(`üìä Resultados por subse√ß√£o:`, generationResults)

    return {
      questions: allGeneratedQuestions,
      source: 'balanced_generation',
      created: true,
      generationPlan,
      results: generationResults,
      totalGenerated: allGeneratedQuestions.length
    }
  }

  /**
   * Gerar quest√µes espec√≠ficas para uma subse√ß√£o
   * @param {number} subjectId - ID da mat√©ria
   * @param {number} sectionId - ID da se√ß√£o
   * @param {Object} subsectionPlan - Dados da subse√ß√£o
   * @param {number} questionsCount - Quantidade a gerar
   * @returns {Promise<Array>} Lista de quest√µes geradas
   */
  static async generateQuestionsForSubsection(subjectId, sectionId, subsectionPlan, questionsCount) {
    try {
      // Buscar conte√∫do da se√ß√£o
      const sectionContent = await this.getSectionContent(sectionId)
      if (!sectionContent) {
        throw new Error(`Conte√∫do da se√ß√£o ${sectionId} n√£o encontrado`)
      }

      // Criar prompt espec√≠fico para a subse√ß√£o
      const subsectionPrompt = this.buildSubsectionPrompt(subsectionPlan, sectionContent, questionsCount)

      // Gerar quest√µes usando o servi√ßo de IA
      const generatedResult = await generateQuestionsProgressively({
        sectionContent: {
          ...sectionContent,
          // Focar no conte√∫do espec√≠fico da subse√ß√£o
          foco_subsecao: {
            titulo: subsectionPlan.titulo,
            conteudo: subsectionPlan.conteudo,
            tipo: subsectionPlan.tipo
          }
        },
        customPrompt: subsectionPrompt,
        targetCount: questionsCount,
        subjectId,
        sectionId
      })

      // Extrair quest√µes do resultado
      const generatedQuestions = generatedResult?.questions || []
      
      if (generatedQuestions.length === 0) {
        console.warn(`‚ö†Ô∏è Nenhuma quest√£o gerada para subse√ß√£o: ${subsectionPlan.titulo}`)
        return []
      }

      // Marcar quest√µes com subsection_id
      const questionsWithSubsection = generatedQuestions.map(question => ({
        ...question,
        subsection_id: subsectionPlan.subsectionId
      }))

      // Salvar quest√µes no banco
      await this.saveQuestions(questionsWithSubsection, subjectId, sectionId, sectionContent)

      console.log(`‚úÖ ${questionsWithSubsection.length} quest√µes geradas para subse√ß√£o: ${subsectionPlan.titulo}`)
      
      return questionsWithSubsection

    } catch (error) {
      console.error(`‚ùå Erro gerando quest√µes para subse√ß√£o ${subsectionPlan.titulo}:`, error)
      throw error
    }
  }

  /**
   * Construir prompt espec√≠fico para uma subse√ß√£o
   * @param {Object} subsectionPlan - Dados da subse√ß√£o
   * @param {Object} sectionContent - Conte√∫do completo da se√ß√£o
   * @param {number} questionsCount - Quantidade a gerar
   * @returns {string} Prompt personalizado
   */
  static buildSubsectionPrompt(subsectionPlan, sectionContent, questionsCount) {
    const baseInfo = `
Se√ß√£o: ${sectionContent.titulo}
Artigo: ${sectionContent.artigo}
Foco espec√≠fico: ${subsectionPlan.titulo}
Conte√∫do espec√≠fico: ${subsectionPlan.conteudo}
Tipo de conte√∫do: ${subsectionPlan.tipo}
`

    let specificInstructions = ''

    switch (subsectionPlan.tipo) {
      case 'conceito_base':
        specificInstructions = `
FOQUE EM: Conceitos fundamentais e defini√ß√µes.
- Teste entendimento de tipifica√ß√£o e elementos do crime
- Explore modalidades de conduta (fabricar vs alterar)
- Questione sobre requisitos legais b√°sicos
`
        break

      case 'objeto_crime':
        // Expandir contexto para objetos com conte√∫do simples
        const expandedContext = this.expandObjectContext(subsectionPlan.conteudo, sectionContent)
        specificInstructions = `
FOQUE EM: Objetos protegidos pela lei - ${subsectionPlan.titulo}
- Teste identifica√ß√£o espec√≠fica e diferencia√ß√£o deste objeto
- Explore caracter√≠sticas legais que tornam este objeto protegido
- Questione sobre diferen√ßas em rela√ß√£o a outros documentos/objetos
- ${expandedContext}
`
        break

      case 'consequencia':
        specificInstructions = `
FOQUE EM: Penalidades e consequ√™ncias jur√≠dicas.
- Teste conhecimento das penas aplic√°veis
- Explore regime de cumprimento e dosimetria
- Questione sobre agravantes e atenuantes
`
        break

      case 'conduta_equiparada':
        specificInstructions = `
FOQUE EM: Condutas equiparadas ao crime principal.
- Teste entendimento das condutas espec√≠ficas: ${subsectionPlan.conteudo}
- Explore diferen√ßas de pena entre condutas
- Questione sobre elementos distintivos
`
        break

      case 'conduta_especifica':
        specificInstructions = `
FOQUE EM: Conduta espec√≠fica e seus requisitos.
- Teste elementos espec√≠ficos da conduta: ${subsectionPlan.conteudo}
- Explore requisitos subjetivos e objetivos
- Questione sobre situa√ß√µes limite
`
        break

      case 'crime_preparatorio':
        specificInstructions = `
FOQUE EM: Atos preparat√≥rios e sua puni√ß√£o.
- Teste entendimento de perigo abstrato
- Explore diferen√ßa entre prepara√ß√£o e tentativa
- Questione sobre objetos especialmente destinados
`
        break

      case 'agravante':
        specificInstructions = `
FOQUE EM: Circunst√¢ncias agravantes.
- Teste aplica√ß√£o da agravante: ${subsectionPlan.conteudo}
- Explore requisitos para caracteriza√ß√£o
- Questione sobre c√°lculo de aumento de pena
`
        break

      default:
        specificInstructions = `
FOQUE EM: ${subsectionPlan.titulo}
- Explore o conte√∫do: ${subsectionPlan.conteudo}
- Teste compreens√£o espec√≠fica deste aspecto
`
    }

    return `${baseInfo}

${specificInstructions}

INSTRU√á√ïES ESPEC√çFICAS:
- Gere EXATAMENTE ${questionsCount} quest√£o(√µes) focada(s) ESPECIFICAMENTE em: ${subsectionPlan.titulo}
- Todas as quest√µes devem ser VERDADEIRO/FALSO
- VARIE os aspectos dentro desta subse√ß√£o espec√≠fica
- EVITE repetir conceitos √≥bvios ou gen√©ricos
- Teste conhecimento ESPEC√çFICO e DIFERENCIADO deste aspecto
- Contextualize dentro do artigo ${sectionContent.artigo} do C√≥digo Penal
`
  }

  /**
   * Expandir contexto para objetos com conte√∫do muito simples
   * @param {string} content - Conte√∫do da subse√ß√£o
   * @param {Object} sectionContent - Conte√∫do completo da se√ß√£o
   * @returns {string} Contexto expandido
   */
  static expandObjectContext(content, sectionContent) {
    // Se o conte√∫do √© muito simples (poucas palavras), expandir contexto
    const wordCount = content.trim().split(/\s+/).length
    
    if (wordCount <= 3) {
      // Contexto expandido para objetos simples
      const contextualHints = {
        'vale postal': 'Explore aspectos espec√≠ficos: quem emite, finalidade, diferen√ßa de outros valores, √¢mbito de prote√ß√£o',
        'papel selado': 'Foque em: diferen√ßa de outros pap√©is, fun√ß√£o tribut√°ria, forma de identifica√ß√£o',
        'selo': 'Aborde: fun√ß√£o espec√≠fica, √≥rg√£o emissor, diferencia√ß√£o de outros selos',
        'documento': 'Teste: caracteriza√ß√£o espec√≠fica, diferen√ßa de outros documentos, elementos essenciais'
      }
      
      // Buscar por palavras-chave no conte√∫do
      for (const [keyword, hint] of Object.entries(contextualHints)) {
        if (content.toLowerCase().includes(keyword)) {
          return `CONTEXTO ESPEC√çFICO: ${hint}`
        }
      }
      
      // Contexto gen√©rico para objetos simples
      return 'CONTEXTO: Teste elementos distintivos, caracter√≠sticas espec√≠ficas e √¢mbito de prote√ß√£o legal'
    }
    
    // Para conte√∫do mais detalhado, usar o pr√≥prio conte√∫do
    return `CONTEXTO: Baseie-se nos elementos espec√≠ficos: ${content}`
  }

  /**
   * Obter relat√≥rio de distribui√ß√£o atual de uma se√ß√£o
   * @param {number} sectionId - ID da se√ß√£o
   * @returns {Promise<Object>} Relat√≥rio detalhado da distribui√ß√£o
   */
  static async getDistributionReport(sectionId) {
    try {
      const summary = await SubsectionDistributionService.getDistributionSummary(sectionId)
      
      return {
        ...summary,
        recommendations: this.generateRecommendations(summary)
      }
    } catch (error) {
      console.error('Erro ao gerar relat√≥rio de distribui√ß√£o:', error)
      throw error
    }
  }

  /**
   * Gerar recomenda√ß√µes baseadas na distribui√ß√£o atual
   * @param {Object} summary - Resumo da distribui√ß√£o
   * @returns {Array} Lista de recomenda√ß√µes
   */
  static generateRecommendations(summary) {
    const recommendations = []

    if (summary.totalDeficit > 0) {
      recommendations.push({
        type: 'generate',
        priority: 'high',
        message: `Gerar ${summary.totalDeficit} quest√µes para equilibrar a se√ß√£o`,
        action: 'generateBalancedQuestions',
        params: { questionsCount: summary.totalDeficit }
      })
    }

    if (summary.balancePercentage < 70) {
      recommendations.push({
        type: 'rebalance',
        priority: 'medium',
        message: 'Distribui√ß√£o muito desequilibrada (< 70%)',
        action: 'reviewDistribution'
      })
    }

    if (summary.mostOverrepresented && summary.mostOverrepresented.deviationFromTarget > 3) {
      recommendations.push({
        type: 'reduce',
        priority: 'low',
        message: `Subse√ß√£o "${summary.mostOverrepresented.titulo}" est√° sobre-representada`,
        action: 'considerRemoval',
        subsection: summary.mostOverrepresented.subsectionId
      })
    }

    return recommendations
  }
}

export default QuestionsService