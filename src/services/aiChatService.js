import axios from 'axios'

const DEEPSEEK_API_URL = 'https://api.deepseek.com/v1/chat/completions'
const API_KEY = import.meta.env.VITE_DEEPSEEK_API_KEY

const deepseekClient = axios.create({
  baseURL: 'https://api.deepseek.com/v1',
  headers: {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${API_KEY}`
  },
  timeout: 30000
})

class AIChatService {
  
  /**
   * Constr√≥i o contexto completo da quest√£o para a IA
   */
  buildContextPrompt(question, userAnswer, isCorrect, chatHistory = [], sectionContent = null) {
    const statusText = isCorrect ? '‚úÖ ACERTOU' : '‚ùå ERROU'
    const userAnswerText = userAnswer ? 'VERDADEIRA' : 'FALSA'
    const correctAnswerText = question.correct_answer ? 'VERDADEIRA' : 'FALSA'

    let contextPrompt = `
CONTEXTO DA QUEST√ÉO:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìã Quest√£o: "${question.question_text}"

üéØ Resposta correta: ${correctAnswerText}
üë§ Resposta do usu√°rio: ${userAnswerText}
üìä Resultado: ${statusText}

üìñ EXPLICA√á√ÉO OFICIAL:
${question.explanation}

‚öñÔ∏è BASE LEGAL COMPLETA:
${this.formatCompleteLegalText(sectionContent, question)}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

`

    if (chatHistory.length > 0) {
      contextPrompt += `
üí¨ CONVERSA ANTERIOR:
${chatHistory.map(msg => `${msg.role === 'user' ? 'üë§ Usu√°rio' : 'ü§ñ IA'}: ${msg.content}`).join('\n')}

`
    }

    contextPrompt += `
üéì INSTRU√á√ïES PARA A IA:
- Seja um professor paciente e did√°tico de Direito Penal
- Use linguagem clara e exemplos pr√°ticos
- ${isCorrect ? 
    'O usu√°rio acertou! Aprofunde o conhecimento e parabenize.' : 
    'O usu√°rio errou. Explique gentilmente onde foi o erro e como evitar.'
  }
- Foque sempre no aspecto educativo
- Use emojis para tornar a explica√ß√£o mais amig√°vel
- Limite sua resposta a no m√°ximo 300 palavras

üë§ PERGUNTA DO USU√ÅRIO: `

    return contextPrompt
  }

  /**
   * Gera sugest√µes contextuais baseadas no desempenho
   */
  getSmartSuggestions(question, isCorrect) {
    const baseSuggestions = [
      "üí° Explique este conceito com mais detalhes",
      "üèõÔ∏è D√™ um exemplo pr√°tico desta situa√ß√£o", 
      "üìö Como isso aparece em provas?",
      "üîó Quais artigos se relacionam com este?"
    ]
    
    if (!isCorrect) {
      return [
        "‚ùì Por que minha resposta est√° errada?",
        "üéØ Como n√£o errar quest√µes similares?", 
        "‚ö†Ô∏è Qual √© a pegadinha desta quest√£o?",
        "üí≠ Me ajude a memorizar isso",
        ...baseSuggestions.slice(0, 2)
      ]
    }
    
    return [
      "ü§î Quais s√£o as exce√ß√µes a esta regra?",
      "‚öñÔ∏è Como isso se relaciona com outros crimes?",
      "üìà Me d√™ casos mais complexos",
      "üèÜ Que n√≠vel de dificuldade eu deveria estudar?",
      ...baseSuggestions.slice(0, 2)
    ]
  }

  /**
   * Envia mensagem para a IA
   */
  async sendMessage(fullPrompt) {
    try {
      console.log('ü§ñ Enviando pergunta para a IA...')
      console.log('üìù Tamanho do prompt:', fullPrompt.length, 'caracteres')
      
      // Sanitizar e limitar o prompt
      const sanitizedPrompt = fullPrompt
        .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '') // Remove caracteres de controle
        .substring(0, 4000) // Limita tamanho
        .trim()
      
      if (sanitizedPrompt.length !== fullPrompt.length) {
        console.log('‚ö†Ô∏è Prompt sanitizado/truncado')
      }
      
      const response = await deepseekClient.post('/chat/completions', {
        model: 'deepseek-chat',
        messages: [
          {
            role: 'system',
            content: `Voc√™ √© um professor especialista em Direito Penal brasileiro com mais de 20 anos de experi√™ncia.
            
            CARACTER√çSTICAS:
            - Did√°tico e paciente
            - Usa exemplos pr√°ticos do cotidiano
            - Explica de forma simples sem perder a precis√£o t√©cnica
            - Encoraja o aprendizado
            - Usa emojis moderadamente para deixar amig√°vel
            
            SEMPRE:
            - Responda de forma direta ao que foi perguntado
            - Use linguagem acess√≠vel 
            - D√™ exemplos quando poss√≠vel
            - Seja encorajador com erros
            - Limite a 300 palavras`
          },
          {
            role: 'user', 
            content: sanitizedPrompt
          }
        ],
        max_tokens: 600,
        temperature: 0.7,
        top_p: 0.9
      })

      if (!response.data?.choices?.[0]?.message?.content) {
        throw new Error('Resposta vazia da IA')
      }

      const aiResponse = response.data.choices[0].message.content
      console.log('‚úÖ Resposta da IA recebida')
      
      return aiResponse

    } catch (error) {
      console.error('‚ùå Erro no chat com IA:', error)
      console.error('üìä Status:', error.response?.status)
      console.error('üìã Dados:', error.response?.data)
      console.error('üì® Config:', error.config?.data ? JSON.parse(error.config.data) : 'N/A')
      
      if (error.response?.status === 400) {
        console.error('üîç Erro 400 - Requisi√ß√£o inv√°lida. Poss√≠veis causas:')
        console.error('- Prompt muito longo:', sanitizedPrompt.length, 'chars')
        console.error('- Caracteres especiais no prompt')
        console.error('- Par√¢metros inv√°lidos na requisi√ß√£o')
        return 'üîç Pergunta muito complexa. Tente uma pergunta mais simples e direta.'
      }
      
      if (error.response?.status === 401) {
        return 'üîë Problema de autentica√ß√£o. Verifique a configura√ß√£o da API.'
      }
      
      if (error.response?.status === 429) {
        return '‚è∞ Muitas perguntas! Aguarde um momento e tente novamente.'
      }
      
      if (error.response?.status >= 500) {
        return 'üîß Nosso professor IA est√° temporariamente indispon√≠vel. Tente novamente em alguns minutos.'
      }
      
      return 'üòÖ Ops! Houve um problema na comunica√ß√£o. Por favor, reformule sua pergunta e tente novamente.'
    }
  }

  /**
   * Verifica se o servi√ßo est√° dispon√≠vel
   */
  isAvailable() {
    const hasKey = !!API_KEY
    if (!hasKey) {
      console.warn('‚ö†Ô∏è VITE_DEEPSEEK_API_KEY n√£o configurada')
    }
    return hasKey
  }

  /**
   * Testa a conex√£o com a API
   */
  async testConnection() {
    try {
      console.log('üß™ Testando conex√£o com DeepSeek API...')
      
      const response = await this.sendMessage('Teste de conex√£o. Responda apenas: "OK"')
      
      console.log('‚úÖ Conex√£o testada com sucesso:', response)
      return { success: true, response }
    } catch (error) {
      console.error('‚ùå Falha no teste de conex√£o:', error)
      return { success: false, error: error.message }
    }
  }

  /**
   * Formata o texto legal completo para o contexto da IA
   */
  formatCompleteLegalText(sectionContent, question) {
    if (!sectionContent?.conteudo) {
      // Fallback para o texto b√°sico da quest√£o
      return question.source_text || 'Art. 293 - Falsificar, fabricando-os ou alterando-os'
    }

    const { artigo, titulo, conteudo } = sectionContent
    let fullText = `${artigo} - ${titulo}\n\n`

    // Tipifica√ß√£o
    if (conteudo.tipificacao) {
      fullText += `${conteudo.tipificacao}\n\n`
    }

    // Objetos (incisos)
    if (conteudo.objetos && Array.isArray(conteudo.objetos)) {
      fullText += `OBJETOS PROTEGIDOS:\n`
      conteudo.objetos.forEach(objeto => {
        fullText += `${objeto}\n`
      })
      fullText += '\n'
    }

    // Elementos do crime
    if (conteudo.elementos && Array.isArray(conteudo.elementos)) {
      fullText += `ELEMENTOS DO CRIME:\n`
      conteudo.elementos.forEach(elemento => {
        fullText += `‚Ä¢ ${elemento}\n`
      })
      fullText += '\n'
    }

    // Objetos protegidos (diferente de objetos/incisos)
    if (conteudo.objetos_protegidos && Array.isArray(conteudo.objetos_protegidos)) {
      fullText += `BENS JUR√çDICOS PROTEGIDOS:\n`
      conteudo.objetos_protegidos.forEach(objeto => {
        fullText += `‚Ä¢ ${objeto}\n`
      })
      fullText += '\n'
    }

    // Pena
    if (conteudo.pena) {
      fullText += `PENA: ${conteudo.pena}\n\n`
    }

    // Observa√ß√µes
    if (conteudo.observacoes) {
      fullText += `OBSERVA√á√ïES IMPORTANTES:\n${conteudo.observacoes}\n\n`
    }

    return fullText.trim()
  }

  /**
   * Processa pergunta com contexto completo
   */
  async askQuestion(userMessage, question, userAnswer, isCorrect, chatHistory = [], sectionContent = null) {
    if (!this.isAvailable()) {
      throw new Error('Servi√ßo de IA n√£o configurado')
    }

    const contextPrompt = this.buildContextPrompt(question, userAnswer, isCorrect, chatHistory, sectionContent)
    const fullPrompt = contextPrompt + userMessage
    
    return await this.sendMessage(fullPrompt)
  }
}

export default new AIChatService()