/**
 * Script para popular as tabelas de subse√ß√µes no Supabase
 * 
 * Execute este script uma vez para criar as subse√ß√µes baseadas no JSON estruturado
 */

import { supabase } from '../lib/supabase.js'

// Dados das subse√ß√µes baseados no JSON estruturado
const subsectionsData = [
  // SE√á√ÉO 1: Falsifica√ß√£o de Pap√©is P√∫blicos - Conceitos B√°sicos (Art. 293)
  {
    section_id: 1,
    subsections: [
      {
        id: 'tipificacao',
        titulo: 'Tipifica√ß√£o do Crime',
        conteudo: 'Falsificar, fabricando-os ou alterando-os',
        tipo: 'conceito_base',
        peso: 2,
        ordem: 1
      },
      {
        id: 'objeto_tributario',
        titulo: 'Selos e Pap√©is Tribut√°rios',
        conteudo: 'selo destinado a controle tribut√°rio, papel selado ou qualquer papel de emiss√£o legal destinado √† arrecada√ß√£o de tributo',
        tipo: 'objeto_crime',
        peso: 1,
        ordem: 2
      },
      {
        id: 'objeto_credito',
        titulo: 'Papel de Cr√©dito P√∫blico',
        conteudo: 'papel de cr√©dito p√∫blico que n√£o seja moeda de curso legal',
        tipo: 'objeto_crime',
        peso: 1,
        ordem: 3
      },
      {
        id: 'objeto_vale_postal',
        titulo: 'Vale Postal',
        conteudo: 'vale postal',
        tipo: 'objeto_crime',
        peso: 1,
        ordem: 4
      },
      {
        id: 'objeto_cautela',
        titulo: 'Cautelas e Cadernetas',
        conteudo: 'cautela de penhor, caderneta de dep√≥sito de caixa econ√¥mica ou de outro estabelecimento mantido por entidade de direito p√∫blico',
        tipo: 'objeto_crime',
        peso: 1,
        ordem: 5
      },
      {
        id: 'objeto_documentos_rendas',
        titulo: 'Documentos de Rendas P√∫blicas',
        conteudo: 'tal√£o, recibo, guia, alvar√° ou qualquer outro documento relativo a arrecada√ß√£o de rendas p√∫blicas ou a dep√≥sito ou cau√ß√£o por que o poder p√∫blico seja respons√°vel',
        tipo: 'objeto_crime',
        peso: 1,
        ordem: 6
      },
      {
        id: 'objeto_transporte',
        titulo: 'Documentos de Transporte P√∫blico',
        conteudo: 'bilhete, passe ou conhecimento de empresa de transporte administrada pela Uni√£o, por Estado ou por Munic√≠pio',
        tipo: 'objeto_crime',
        peso: 1,
        ordem: 7
      },
      {
        id: 'pena',
        titulo: 'Penalidade',
        conteudo: 'reclus√£o, de dois a oito anos, e multa',
        tipo: 'consequencia',
        peso: 1,
        ordem: 8
      },
      {
        id: 'modalidades',
        titulo: 'Modalidades de Conduta',
        conteudo: 'fabrica√ß√£o (criar do nada) e altera√ß√£o (modificar existente)',
        tipo: 'conceito_base',
        peso: 2,
        ordem: 9
      }
    ]
  },
  
  // SE√á√ÉO 2: Falsifica√ß√£o de Pap√©is P√∫blicos - Condutas Equiparadas (Art. 293, ¬ß1¬∫ ao ¬ß5¬∫)
  {
    section_id: 2,
    subsections: [
      {
        id: 'paragrafo_1_uso',
        titulo: 'Uso de Pap√©is Falsificados',
        conteudo: 'usa, guarda, possui ou det√©m qualquer dos pap√©is falsificados',
        tipo: 'conduta_equiparada',
        peso: 2,
        ordem: 1
      },
      {
        id: 'paragrafo_1_circulacao',
        titulo: 'Circula√ß√£o de Selos Falsificados',
        conteudo: 'importa, exporta, adquire, vende, troca, cede, empresta, guarda, fornece ou restitui √† circula√ß√£o selo falsificado destinado a controle tribut√°rio',
        tipo: 'conduta_equiparada',
        peso: 2,
        ordem: 2
      },
      {
        id: 'paragrafo_1_produtos',
        titulo: 'Produtos com Selos Falsificados',
        conteudo: 'importa, exporta, adquire, vende, exp√µe √† venda, mant√©m em dep√≥sito, guarda, troca, cede, empresta, fornece, porta ou utiliza produto com selo falsificado ou sem selo obrigat√≥rio',
        tipo: 'conduta_equiparada',
        peso: 2,
        ordem: 3
      },
      {
        id: 'paragrafo_2_supressao',
        titulo: 'Supress√£o de Sinais de Inutiliza√ß√£o',
        conteudo: 'suprimir carimbo ou sinal indicativo de inutiliza√ß√£o para tornar pap√©is novamente utiliz√°veis',
        tipo: 'conduta_especifica',
        peso: 1,
        ordem: 4
      },
      {
        id: 'paragrafo_3_uso_alterado',
        titulo: 'Uso de Papel Alterado',
        conteudo: 'usar papel alterado conforme ¬ß2¬∫',
        tipo: 'conduta_especifica',
        peso: 1,
        ordem: 5
      },
      {
        id: 'paragrafo_4_boa_fe',
        titulo: 'Uso Ap√≥s Conhecimento da Falsidade',
        conteudo: 'usar ou restituir √† circula√ß√£o papel falsificado, mesmo recebido de boa-f√©, ap√≥s conhecer a falsidade',
        tipo: 'conduta_especifica',
        peso: 1,
        ordem: 6
      },
      {
        id: 'penas_equiparadas',
        titulo: 'Penalidades das Condutas Equiparadas',
        conteudo: '¬ß1¬∫: mesma pena do caput | ¬ß2¬∫ e ¬ß3¬∫: reclus√£o, de um a quatro anos, e multa | ¬ß4¬∫: deten√ß√£o, de seis meses a dois anos, ou multa',
        tipo: 'consequencia',
        peso: 1,
        ordem: 7
      }
    ]
  },
  
  // SE√á√ÉO 3: Petrechos de Falsifica√ß√£o e Funcion√°rio P√∫blico (Art. 294-295)
  {
    section_id: 3,
    subsections: [
      {
        id: 'petrechos_conduta',
        titulo: 'Conduta com Petrechos',
        conteudo: 'fabricar, adquirir, fornecer, possuir ou guardar objeto especialmente destinado √† falsifica√ß√£o',
        tipo: 'crime_preparatorio',
        peso: 2,
        ordem: 1
      },
      {
        id: 'petrechos_pena',
        titulo: 'Pena por Petrechos',
        conteudo: 'reclus√£o, de um a tr√™s anos, e multa',
        tipo: 'consequencia',
        peso: 1,
        ordem: 2
      },
      {
        id: 'petrechos_natureza',
        titulo: 'Natureza do Crime de Petrechos',
        conteudo: 'crime de perigo abstrato - pune prepara√ß√£o para falsifica√ß√£o',
        tipo: 'conceito_base',
        peso: 1,
        ordem: 3
      },
      {
        id: 'funcionario_agravante',
        titulo: 'Agravante para Funcion√°rio P√∫blico',
        conteudo: 'funcion√°rio p√∫blico que comete qualquer crime do cap√≠tulo prevalecendo-se do cargo - aumenta-se a pena de sexta parte',
        tipo: 'agravante',
        peso: 2,
        ordem: 4
      }
    ]
  },
  
  // SE√á√ÉO 4: Falsifica√ß√£o de Selos e Sinais P√∫blicos (Art. 296)
  {
    section_id: 4,
    subsections: [
      {
        id: 'selos_tipificacao',
        titulo: 'Tipifica√ß√£o - Selos P√∫blicos',
        conteudo: 'falsificar, fabricando-os ou alterando-os',
        tipo: 'conceito_base',
        peso: 2,
        ordem: 1
      },
      {
        id: 'selos_oficiais',
        titulo: 'Selos Oficiais de Entes P√∫blicos',
        conteudo: 'selo p√∫blico destinado a autenticar atos oficiais da Uni√£o, de Estado ou de Munic√≠pio',
        tipo: 'objeto_crime',
        peso: 1,
        ordem: 2
      },
      {
        id: 'selos_entidades',
        titulo: 'Selos de Entidades e Autoridades',
        conteudo: 'selo ou sinal atribu√≠do por lei a entidade de direito p√∫blico, ou a autoridade, ou sinal p√∫blico de tabeli√£o',
        tipo: 'objeto_crime',
        peso: 1,
        ordem: 3
      },
      {
        id: 'selos_pena_basica',
        titulo: 'Pena B√°sica para Selos',
        conteudo: 'reclus√£o, de dois a seis anos, e multa',
        tipo: 'consequencia',
        peso: 1,
        ordem: 4
      },
      {
        id: 'selos_uso_falsificado',
        titulo: 'Uso de Selo Falsificado',
        conteudo: 'fazer uso do selo ou sinal falsificado',
        tipo: 'conduta_equiparada',
        peso: 1,
        ordem: 5
      },
      {
        id: 'selos_uso_verdadeiro_indevido',
        titulo: 'Uso Indevido de Selo Verdadeiro',
        conteudo: 'fazer uso, sem autoriza√ß√£o, do selo ou sinal verdadeiro em preju√≠zo de outrem ou em proveito pr√≥prio ou alheio',
        tipo: 'conduta_equiparada',
        peso: 1,
        ordem: 6
      }
    ]
  }
]

/**
 * Popular tabela content_subsections
 */
async function populateContentSubsections() {
  console.log('üöÄ Iniciando popula√ß√£o da tabela content_subsections...')
  
  try {
    // Limpar dados existentes (opcional)
    console.log('üßπ Limpando dados existentes...')
    const { error: deleteError } = await supabase
      .from('content_subsections')
      .delete()
      .neq('id', 'never_matches') // Deletar todos
    
    if (deleteError && !deleteError.message.includes('no rows')) {
      console.warn('Aviso ao limpar dados:', deleteError)
    }

    // Preparar dados para inser√ß√£o
    const allSubsections = []
    
    for (const sectionData of subsectionsData) {
      for (const subsection of sectionData.subsections) {
        allSubsections.push({
          id: subsection.id,
          section_id: sectionData.section_id,
          titulo: subsection.titulo,
          conteudo: subsection.conteudo,
          tipo: subsection.tipo,
          peso: subsection.peso,
          ordem: subsection.ordem,
          is_active: true
        })
      }
    }

    console.log(`üìù Inserindo ${allSubsections.length} subse√ß√µes...`)
    
    // Inserir dados em lotes
    const batchSize = 10
    for (let i = 0; i < allSubsections.length; i += batchSize) {
      const batch = allSubsections.slice(i, i + batchSize)
      
      const { data, error } = await supabase
        .from('content_subsections')
        .insert(batch)
        .select()

      if (error) {
        console.error(`‚ùå Erro inserindo lote ${Math.floor(i/batchSize) + 1}:`, error)
        throw error
      }
      
      console.log(`‚úÖ Lote ${Math.floor(i/batchSize) + 1} inserido: ${batch.length} subse√ß√µes`)
    }

    console.log('‚úÖ Tabela content_subsections populada com sucesso!')
    return allSubsections.length
    
  } catch (error) {
    console.error('‚ùå Erro populando content_subsections:', error)
    throw error
  }
}

/**
 * Calcular e inserir targets iniciais
 */
async function calculateInitialTargets() {
  console.log('üéØ Calculando targets iniciais...')
  
  try {
    // Para cada se√ß√£o, calcular distribui√ß√£o ideal para 10 quest√µes
    const targetPerSection = 10
    const statsToInsert = []
    
    for (const sectionData of subsectionsData) {
      const subsections = sectionData.subsections
      const totalWeight = subsections.reduce((sum, sub) => sum + sub.peso, 0)
      
      console.log(`üìä Se√ß√£o ${sectionData.section_id}: ${subsections.length} subse√ß√µes, peso total = ${totalWeight}`)
      
      for (const subsection of subsections) {
        const targetCount = Math.ceil((subsection.peso / totalWeight) * targetPerSection)
        
        statsToInsert.push({
          section_id: sectionData.section_id,
          subsection_id: subsection.id,
          question_count: 0,
          target_count: targetCount,
          last_updated: new Date().toISOString()
        })
        
        console.log(`  ‚Ä¢ ${subsection.titulo}: target = ${targetCount} quest√µes (peso ${subsection.peso})`)
      }
    }

    // Limpar stats existentes
    console.log('üßπ Limpando estat√≠sticas existentes...')
    const { error: deleteStatsError } = await supabase
      .from('subsection_question_stats')
      .delete()
      .neq('section_id', -1) // Deletar todos
    
    if (deleteStatsError && !deleteStatsError.message.includes('no rows')) {
      console.warn('Aviso ao limpar stats:', deleteStatsError)
    }

    // Inserir estat√≠sticas iniciais
    console.log(`üìä Inserindo ${statsToInsert.length} estat√≠sticas iniciais...`)
    
    const { data: statsData, error: statsError } = await supabase
      .from('subsection_question_stats')
      .insert(statsToInsert)
      .select()

    if (statsError) {
      console.error('‚ùå Erro inserindo estat√≠sticas:', statsError)
      throw statsError
    }
    
    console.log('‚úÖ Estat√≠sticas iniciais calculadas e inseridas!')
    return statsToInsert.length
    
  } catch (error) {
    console.error('‚ùå Erro calculando targets:', error)
    throw error
  }
}

/**
 * Fun√ß√£o principal
 */
async function main() {
  try {
    console.log('üé¨ Iniciando popula√ß√£o das tabelas de subse√ß√µes...\n')
    
    const subsectionsCount = await populateContentSubsections()
    console.log(`\n‚úÖ ${subsectionsCount} subse√ß√µes inseridas com sucesso!\n`)
    
    const statsCount = await calculateInitialTargets()
    console.log(`\n‚úÖ ${statsCount} estat√≠sticas inseridas com sucesso!\n`)
    
    console.log('üéâ Popula√ß√£o das tabelas conclu√≠da com sucesso!')
    console.log('\nüìã Resumo:')
    console.log(`  ‚Ä¢ Subse√ß√µes criadas: ${subsectionsCount}`)
    console.log(`  ‚Ä¢ Estat√≠sticas criadas: ${statsCount}`)
    console.log('  ‚Ä¢ Target padr√£o: 10 quest√µes por se√ß√£o')
    console.log('\nüöÄ O sistema de distribui√ß√£o equilibrada est√° pronto para uso!')
    
  } catch (error) {
    console.error('\n‚ùå Erro durante a popula√ß√£o das tabelas:', error)
    process.exit(1)
  }
}

// Exportar fun√ß√µes para uso externo
export { populateContentSubsections, calculateInitialTargets, main }

// Executar se chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  main()
}